/* Zepto 1.1.6 - zepto event ajax form ie touch ios3 - zeptojs.com/license */

var Zepto = (function() {
  var undefined, key, $, classList, emptyArray = [], slice = emptyArray.slice, filter = emptyArray.filter,
    document = window.document,
    elementDisplay = {}, classCache = {},
    cssNumber = { 'column-count': 1, 'columns': 1, 'font-weight': 1, 'line-height': 1,'opacity': 1, 'z-index': 1, 'zoom': 1 },
    fragmentRE = /^\s*<(\w+|!)[^>]*>/,
    singleTagRE = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
    tagExpanderRE = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
    rootNodeRE = /^(?:body|html)$/i,
    capitalRE = /([A-Z])/g,

    // special attributes that should be get/set via method calls
    methodAttributes = ['val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'],

    adjacencyOperators = [ 'after', 'prepend', 'before', 'append' ],
    table = document.createElement('table'),
    tableRow = document.createElement('tr'),
    containers = {
      'tr': document.createElement('tbody'),
      'tbody': table, 'thead': table, 'tfoot': table,
      'td': tableRow, 'th': tableRow,
      '*': document.createElement('div')
    },
    readyRE = /complete|loaded|interactive/,
    simpleSelectorRE = /^[\w-]*$/,
    class2type = {},
    toString = class2type.toString,
    zepto = {},
    camelize, uniq,
    tempParent = document.createElement('div'),
    propMap = {
      'tabindex': 'tabIndex',
      'readonly': 'readOnly',
      'for': 'htmlFor',
      'class': 'className',
      'maxlength': 'maxLength',
      'cellspacing': 'cellSpacing',
      'cellpadding': 'cellPadding',
      'rowspan': 'rowSpan',
      'colspan': 'colSpan',
      'usemap': 'useMap',
      'frameborder': 'frameBorder',
      'contenteditable': 'contentEditable'
    },
    isArray = Array.isArray ||
      function(object){ return object instanceof Array }

  zepto.matches = function(element, selector) {
    if (!selector || !element || element.nodeType !== 1) return false
    var matchesSelector = element.webkitMatchesSelector || element.mozMatchesSelector ||
                          element.oMatchesSelector || element.matchesSelector
    if (matchesSelector) return matchesSelector.call(element, selector)
    // fall back to performing a selector:
    var match, parent = element.parentNode, temp = !parent
    if (temp) (parent = tempParent).appendChild(element)
    match = ~zepto.qsa(parent, selector).indexOf(element)
    temp && tempParent.removeChild(element)
    return match
  }

  function type(obj) {
    return obj == null ? String(obj) :
      class2type[toString.call(obj)] || "object"
  }

  function isFunction(value) { return type(value) == "function" }
  function isWindow(obj)     { return obj != null && obj == obj.window }
  function isDocument(obj)   { return obj != null && obj.nodeType == obj.DOCUMENT_NODE }
  function isObject(obj)     { return type(obj) == "object" }
  function isPlainObject(obj) {
    return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype
  }
  function likeArray(obj) { return typeof obj.length == 'number' }

  function compact(array) { return filter.call(array, function(item){ return item != null }) }
  function flatten(array) { return array.length > 0 ? $.fn.concat.apply([], array) : array }
  camelize = function(str){ return str.replace(/-+(.)?/g, function(match, chr){ return chr ? chr.toUpperCase() : '' }) }
  function dasherize(str) {
    return str.replace(/::/g, '/')
           .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
           .replace(/([a-z\d])([A-Z])/g, '$1_$2')
           .replace(/_/g, '-')
           .toLowerCase()
  }
  uniq = function(array){ return filter.call(array, function(item, idx){ return array.indexOf(item) == idx }) }

  function classRE(name) {
    return name in classCache ?
      classCache[name] : (classCache[name] = new RegExp('(^|\\s)' + name + '(\\s|$)'))
  }

  function maybeAddPx(name, value) {
    return (typeof value == "number" && !cssNumber[dasherize(name)]) ? value + "px" : value
  }

  function defaultDisplay(nodeName) {
    var element, display
    if (!elementDisplay[nodeName]) {
      element = document.createElement(nodeName)
      document.body.appendChild(element)
      display = getComputedStyle(element, '').getPropertyValue("display")
      element.parentNode.removeChild(element)
      display == "none" && (display = "block")
      elementDisplay[nodeName] = display
    }
    return elementDisplay[nodeName]
  }

  function children(element) {
    return 'children' in element ?
      slice.call(element.children) :
      $.map(element.childNodes, function(node){ if (node.nodeType == 1) return node })
  }

  // `$.zepto.fragment` takes a html string and an optional tag name
  // to generate DOM nodes nodes from the given html string.
  // The generated DOM nodes are returned as an array.
  // This function can be overriden in plugins for example to make
  // it compatible with browsers that don't support the DOM fully.
  zepto.fragment = function(html, name, properties) {
    var dom, nodes, container

    // A special case optimization for a single tag
    if (singleTagRE.test(html)) dom = $(document.createElement(RegExp.$1))

    if (!dom) {
      if (html.replace) html = html.replace(tagExpanderRE, "<$1></$2>")
      if (name === undefined) name = fragmentRE.test(html) && RegExp.$1
      if (!(name in containers)) name = '*'

      container = containers[name]
      container.innerHTML = '' + html
      dom = $.each(slice.call(container.childNodes), function(){
        container.removeChild(this)
      })
    }

    if (isPlainObject(properties)) {
      nodes = $(dom)
      $.each(properties, function(key, value) {
        if (methodAttributes.indexOf(key) > -1) nodes[key](value)
        else nodes.attr(key, value)
      })
    }

    return dom
  }

  // `$.zepto.Z` swaps out the prototype of the given `dom` array
  // of nodes with `$.fn` and thus supplying all the Zepto functions
  // to the array. Note that `__proto__` is not supported on Internet
  // Explorer. This method can be overriden in plugins.
  zepto.Z = function(dom, selector) {
    dom = dom || []
    dom.__proto__ = $.fn
    dom.selector = selector || ''
    return dom
  }

  // `$.zepto.isZ` should return `true` if the given object is a Zepto
  // collection. This method can be overriden in plugins.
  zepto.isZ = function(object) {
    return object instanceof zepto.Z
  }

  // `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and
  // takes a CSS selector and an optional context (and handles various
  // special cases).
  // This method can be overriden in plugins.
  zepto.init = function(selector, context) {
    var dom
    // If nothing given, return an empty Zepto collection
    if (!selector) return zepto.Z()
    // Optimize for string selectors
    else if (typeof selector == 'string') {
      selector = selector.trim()
      // If it's a html fragment, create nodes from it
      // Note: In both Chrome 21 and Firefox 15, DOM error 12
      // is thrown if the fragment doesn't begin with <
      if (selector[0] == '<' && fragmentRE.test(selector))
        dom = zepto.fragment(selector, RegExp.$1, context), selector = null
      // If there's a context, create a collection on that context first, and select
      // nodes from there
      else if (context !== undefined) return $(context).find(selector)
      // If it's a CSS selector, use it to select nodes.
      else dom = zepto.qsa(document, selector)
    }
    // If a function is given, call it when the DOM is ready
    else if (isFunction(selector)) return $(document).ready(selector)
    // If a Zepto collection is given, just return it
    else if (zepto.isZ(selector)) return selector
    else {
      // normalize array if an array of nodes is given
      if (isArray(selector)) dom = compact(selector)
      // Wrap DOM nodes.
      else if (isObject(selector))
        dom = [selector], selector = null
      // If it's a html fragment, create nodes from it
      else if (fragmentRE.test(selector))
        dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null
      // If there's a context, create a collection on that context first, and select
      // nodes from there
      else if (context !== undefined) return $(context).find(selector)
      // And last but no least, if it's a CSS selector, use it to select nodes.
      else dom = zepto.qsa(document, selector)
    }
    // create a new Zepto collection from the nodes found
    return zepto.Z(dom, selector)
  }

  // `$` will be the base `Zepto` object. When calling this
  // function just call `$.zepto.init, which makes the implementation
  // details of selecting nodes and creating Zepto collections
  // patchable in plugins.
  $ = function(selector, context){
    return zepto.init(selector, context)
  }

  function extend(target, source, deep) {
    for (key in source)
      if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
        if (isPlainObject(source[key]) && !isPlainObject(target[key]))
          target[key] = {}
        if (isArray(source[key]) && !isArray(target[key]))
          target[key] = []
        extend(target[key], source[key], deep)
      }
      else if (source[key] !== undefined) target[key] = source[key]
  }

  // Copy all but undefined properties from one or more
  // objects to the `target` object.
  $.extend = function(target){
    var deep, args = slice.call(arguments, 1)
    if (typeof target == 'boolean') {
      deep = target
      target = args.shift()
    }
    args.forEach(function(arg){ extend(target, arg, deep) })
    return target
  }

  // `$.zepto.qsa` is Zepto's CSS selector implementation which
  // uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.
  // This method can be overriden in plugins.
  zepto.qsa = function(element, selector){
    var found,
        maybeID = selector[0] == '#',
        maybeClass = !maybeID && selector[0] == '.',
        nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked
        isSimple = simpleSelectorRE.test(nameOnly)
    return (isDocument(element) && isSimple && maybeID) ?
      ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :
      (element.nodeType !== 1 && element.nodeType !== 9) ? [] :
      slice.call(
        isSimple && !maybeID ?
          maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class
          element.getElementsByTagName(selector) : // Or a tag
          element.querySelectorAll(selector) // Or it's not simple, and we need to query all
      )
  }

  function filtered(nodes, selector) {
    return selector == null ? $(nodes) : $(nodes).filter(selector)
  }

  $.contains = document.documentElement.contains ?
    function(parent, node) {
      return parent !== node && parent.contains(node)
    } :
    function(parent, node) {
      while (node && (node = node.parentNode))
        if (node === parent) return true
      return false
    }

  function funcArg(context, arg, idx, payload) {
    return isFunction(arg) ? arg.call(context, idx, payload) : arg
  }

  function setAttribute(node, name, value) {
    value == null ? node.removeAttribute(name) : node.setAttribute(name, value)
  }

  // access className property while respecting SVGAnimatedString
  function className(node, value){
    var klass = node.className || '',
        svg   = klass && klass.baseVal !== undefined

    if (value === undefined) return svg ? klass.baseVal : klass
    svg ? (klass.baseVal = value) : (node.className = value)
  }

  // "true"  => true
  // "false" => false
  // "null"  => null
  // "42"    => 42
  // "42.5"  => 42.5
  // "08"    => "08"
  // JSON    => parse if valid
  // String  => self
  function deserializeValue(value) {
    try {
      return value ?
        value == "true" ||
        ( value == "false" ? false :
          value == "null" ? null :
          +value + "" == value ? +value :
          /^[\[\{]/.test(value) ? $.parseJSON(value) :
          value )
        : value
    } catch(e) {
      return value
    }
  }

  $.type = type
  $.isFunction = isFunction
  $.isWindow = isWindow
  $.isArray = isArray
  $.isPlainObject = isPlainObject

  $.isEmptyObject = function(obj) {
    var name
    for (name in obj) return false
    return true
  }

  $.inArray = function(elem, array, i){
    return emptyArray.indexOf.call(array, elem, i)
  }

  $.camelCase = camelize
  $.trim = function(str) {
    return str == null ? "" : String.prototype.trim.call(str)
  }

  // plugin compatibility
  $.uuid = 0
  $.support = { }
  $.expr = { }

  $.map = function(elements, callback){
    var value, values = [], i, key
    if (likeArray(elements))
      for (i = 0; i < elements.length; i++) {
        value = callback(elements[i], i)
        if (value != null) values.push(value)
      }
    else
      for (key in elements) {
        value = callback(elements[key], key)
        if (value != null) values.push(value)
      }
    return flatten(values)
  }

  $.each = function(elements, callback){
    var i, key
    if (likeArray(elements)) {
      for (i = 0; i < elements.length; i++)
        if (callback.call(elements[i], i, elements[i]) === false) return elements
    } else {
      for (key in elements)
        if (callback.call(elements[key], key, elements[key]) === false) return elements
    }

    return elements
  }

  $.grep = function(elements, callback){
    return filter.call(elements, callback)
  }

  if (window.JSON) $.parseJSON = JSON.parse

  // Populate the class2type map
  $.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase()
  })

  // Define methods that will be available on all
  // Zepto collections
  $.fn = {
    // Because a collection acts like an array
    // copy over these useful array functions.
    forEach: emptyArray.forEach,
    reduce: emptyArray.reduce,
    push: emptyArray.push,
    sort: emptyArray.sort,
    indexOf: emptyArray.indexOf,
    concat: emptyArray.concat,

    // `map` and `slice` in the jQuery API work differently
    // from their array counterparts
    map: function(fn){
      return $($.map(this, function(el, i){ return fn.call(el, i, el) }))
    },
    slice: function(){
      return $(slice.apply(this, arguments))
    },

    ready: function(callback){
      // need to check if document.body exists for IE as that browser reports
      // document ready when it hasn't yet created the body element
      if (readyRE.test(document.readyState) && document.body) callback($)
      else document.addEventListener('DOMContentLoaded', function(){ callback($) }, false)
      return this
    },
    get: function(idx){
      return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]
    },
    toArray: function(){ return this.get() },
    size: function(){
      return this.length
    },
    remove: function(){
      return this.each(function(){
        if (this.parentNode != null)
          this.parentNode.removeChild(this)
      })
    },
    each: function(callback){
      emptyArray.every.call(this, function(el, idx){
        return callback.call(el, idx, el) !== false
      })
      return this
    },
    filter: function(selector){
      if (isFunction(selector)) return this.not(this.not(selector))
      return $(filter.call(this, function(element){
        return zepto.matches(element, selector)
      }))
    },
    add: function(selector,context){
      return $(uniq(this.concat($(selector,context))))
    },
    is: function(selector){
      return this.length > 0 && zepto.matches(this[0], selector)
    },
    not: function(selector){
      var nodes=[]
      if (isFunction(selector) && selector.call !== undefined)
        this.each(function(idx){
          if (!selector.call(this,idx)) nodes.push(this)
        })
      else {
        var excludes = typeof selector == 'string' ? this.filter(selector) :
          (likeArray(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)
        this.forEach(function(el){
          if (excludes.indexOf(el) < 0) nodes.push(el)
        })
      }
      return $(nodes)
    },
    has: function(selector){
      return this.filter(function(){
        return isObject(selector) ?
          $.contains(this, selector) :
          $(this).find(selector).size()
      })
    },
    eq: function(idx){
      return idx === -1 ? this.slice(idx) : this.slice(idx, + idx + 1)
    },
    first: function(){
      var el = this[0]
      return el && !isObject(el) ? el : $(el)
    },
    last: function(){
      var el = this[this.length - 1]
      return el && !isObject(el) ? el : $(el)
    },
    find: function(selector){
      var result, $this = this
      if (!selector) result = $()
      else if (typeof selector == 'object')
        result = $(selector).filter(function(){
          var node = this
          return emptyArray.some.call($this, function(parent){
            return $.contains(parent, node)
          })
        })
      else if (this.length == 1) result = $(zepto.qsa(this[0], selector))
      else result = this.map(function(){ return zepto.qsa(this, selector) })
      return result
    },
    closest: function(selector, context){
      var node = this[0], collection = false
      if (typeof selector == 'object') collection = $(selector)
      while (node && !(collection ? collection.indexOf(node) >= 0 : zepto.matches(node, selector)))
        node = node !== context && !isDocument(node) && node.parentNode
      return $(node)
    },
    parents: function(selector){
      var ancestors = [], nodes = this
      while (nodes.length > 0)
        nodes = $.map(nodes, function(node){
          if ((node = node.parentNode) && !isDocument(node) && ancestors.indexOf(node) < 0) {
            ancestors.push(node)
            return node
          }
        })
      return filtered(ancestors, selector)
    },
    parent: function(selector){
      return filtered(uniq(this.pluck('parentNode')), selector)
    },
    children: function(selector){
      return filtered(this.map(function(){ return children(this) }), selector)
    },
    contents: function() {
      return this.map(function() { return slice.call(this.childNodes) })
    },
    siblings: function(selector){
      return filtered(this.map(function(i, el){
        return filter.call(children(el.parentNode), function(child){ return child!==el })
      }), selector)
    },
    empty: function(){
      return this.each(function(){ this.innerHTML = '' })
    },
    // `pluck` is borrowed from Prototype.js
    pluck: function(property){
      return $.map(this, function(el){ return el[property] })
    },
    show: function(){
      return this.each(function(){
        this.style.display == "none" && (this.style.display = '')
        if (getComputedStyle(this, '').getPropertyValue("display") == "none")
          this.style.display = defaultDisplay(this.nodeName)
      })
    },
    replaceWith: function(newContent){
      return this.before(newContent).remove()
    },
    wrap: function(structure){
      var func = isFunction(structure)
      if (this[0] && !func)
        var dom   = $(structure).get(0),
            clone = dom.parentNode || this.length > 1

      return this.each(function(index){
        $(this).wrapAll(
          func ? structure.call(this, index) :
            clone ? dom.cloneNode(true) : dom
        )
      })
    },
    wrapAll: function(structure){
      if (this[0]) {
        $(this[0]).before(structure = $(structure))
        var children
        // drill down to the inmost element
        while ((children = structure.children()).length) structure = children.first()
        $(structure).append(this)
      }
      return this
    },
    wrapInner: function(structure){
      var func = isFunction(structure)
      return this.each(function(index){
        var self = $(this), contents = self.contents(),
            dom  = func ? structure.call(this, index) : structure
        contents.length ? contents.wrapAll(dom) : self.append(dom)
      })
    },
    unwrap: function(){
      this.parent().each(function(){
        $(this).replaceWith($(this).children())
      })
      return this
    },
    clone: function(){
      return this.map(function(){ return this.cloneNode(true) })
    },
    hide: function(){
      return this.css("display", "none")
    },
    toggle: function(setting){
      return this.each(function(){
        var el = $(this)
        ;(setting === undefined ? el.css("display") == "none" : setting) ? el.show() : el.hide()
      })
    },
    prev: function(selector){ return $(this.pluck('previousElementSibling')).filter(selector || '*') },
    next: function(selector){ return $(this.pluck('nextElementSibling')).filter(selector || '*') },
    html: function(html){
      return 0 in arguments ?
        this.each(function(idx){
          var originHtml = this.innerHTML
          $(this).empty().append( funcArg(this, html, idx, originHtml) )
        }) :
        (0 in this ? this[0].innerHTML : null)
    },
    text: function(text){
      return 0 in arguments ?
        this.each(function(idx){
          var newText = funcArg(this, text, idx, this.textContent)
          this.textContent = newText == null ? '' : ''+newText
        }) :
        (0 in this ? this[0].textContent : null)
    },
    attr: function(name, value){
      var result
      return (typeof name == 'string' && !(1 in arguments)) ?
        (!this.length || this[0].nodeType !== 1 ? undefined :
          (!(result = this[0].getAttribute(name)) && name in this[0]) ? this[0][name] : result
        ) :
        this.each(function(idx){
          if (this.nodeType !== 1) return
          if (isObject(name)) for (key in name) setAttribute(this, key, name[key])
          else setAttribute(this, name, funcArg(this, value, idx, this.getAttribute(name)))
        })
    },
    removeAttr: function(name){
      return this.each(function(){ this.nodeType === 1 && name.split(' ').forEach(function(attribute){
        setAttribute(this, attribute)
      }, this)})
    },
    prop: function(name, value){
      name = propMap[name] || name
      return (1 in arguments) ?
        this.each(function(idx){
          this[name] = funcArg(this, value, idx, this[name])
        }) :
        (this[0] && this[0][name])
    },
    data: function(name, value){
      var attrName = 'data-' + name.replace(capitalRE, '-$1').toLowerCase()

      var data = (1 in arguments) ?
        this.attr(attrName, value) :
        this.attr(attrName)

      return data !== null ? deserializeValue(data) : undefined
    },
    val: function(value){
      return 0 in arguments ?
        this.each(function(idx){
          this.value = funcArg(this, value, idx, this.value)
        }) :
        (this[0] && (this[0].multiple ?
           $(this[0]).find('option').filter(function(){ return this.selected }).pluck('value') :
           this[0].value)
        )
    },
    offset: function(coordinates){
      if (coordinates) return this.each(function(index){
        var $this = $(this),
            coords = funcArg(this, coordinates, index, $this.offset()),
            parentOffset = $this.offsetParent().offset(),
            props = {
              top:  coords.top  - parentOffset.top,
              left: coords.left - parentOffset.left
            }

        if ($this.css('position') == 'static') props['position'] = 'relative'
        $this.css(props)
      })
      if (!this.length) return null
      var obj = this[0].getBoundingClientRect()
      return {
        left: obj.left + window.pageXOffset,
        top: obj.top + window.pageYOffset,
        width: Math.round(obj.width),
        height: Math.round(obj.height)
      }
    },
    css: function(property, value){
      if (arguments.length < 2) {
        var computedStyle, element = this[0]
        if(!element) return
        computedStyle = getComputedStyle(element, '')
        if (typeof property == 'string')
          return element.style[camelize(property)] || computedStyle.getPropertyValue(property)
        else if (isArray(property)) {
          var props = {}
          $.each(property, function(_, prop){
            props[prop] = (element.style[camelize(prop)] || computedStyle.getPropertyValue(prop))
          })
          return props
        }
      }

      var css = ''
      if (type(property) == 'string') {
        if (!value && value !== 0)
          this.each(function(){ this.style.removeProperty(dasherize(property)) })
        else
          css = dasherize(property) + ":" + maybeAddPx(property, value)
      } else {
        for (key in property)
          if (!property[key] && property[key] !== 0)
            this.each(function(){ this.style.removeProperty(dasherize(key)) })
          else
            css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'
      }

      return this.each(function(){ this.style.cssText += ';' + css })
    },
    index: function(element){
      return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0])
    },
    hasClass: function(name){
      if (!name) return false
      return emptyArray.some.call(this, function(el){
        return this.test(className(el))
      }, classRE(name))
    },
    addClass: function(name){
      if (!name) return this
      return this.each(function(idx){
        if (!('className' in this)) return
        classList = []
        var cls = className(this), newName = funcArg(this, name, idx, cls)
        newName.split(/\s+/g).forEach(function(klass){
          if (!$(this).hasClass(klass)) classList.push(klass)
        }, this)
        classList.length && className(this, cls + (cls ? " " : "") + classList.join(" "))
      })
    },
    removeClass: function(name){
      return this.each(function(idx){
        if (!('className' in this)) return
        if (name === undefined) return className(this, '')
        classList = className(this)
        funcArg(this, name, idx, classList).split(/\s+/g).forEach(function(klass){
          classList = classList.replace(classRE(klass), " ")
        })
        className(this, classList.trim())
      })
    },
    toggleClass: function(name, when){
      if (!name) return this
      return this.each(function(idx){
        var $this = $(this), names = funcArg(this, name, idx, className(this))
        names.split(/\s+/g).forEach(function(klass){
          (when === undefined ? !$this.hasClass(klass) : when) ?
            $this.addClass(klass) : $this.removeClass(klass)
        })
      })
    },
    scrollTop: function(value){
      if (!this.length) return
      var hasScrollTop = 'scrollTop' in this[0]
      if (value === undefined) return hasScrollTop ? this[0].scrollTop : this[0].pageYOffset
      return this.each(hasScrollTop ?
        function(){ this.scrollTop = value } :
        function(){ this.scrollTo(this.scrollX, value) })
    },
    scrollLeft: function(value){
      if (!this.length) return
      var hasScrollLeft = 'scrollLeft' in this[0]
      if (value === undefined) return hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset
      return this.each(hasScrollLeft ?
        function(){ this.scrollLeft = value } :
        function(){ this.scrollTo(value, this.scrollY) })
    },
    position: function() {
      if (!this.length) return

      var elem = this[0],
        // Get *real* offsetParent
        offsetParent = this.offsetParent(),
        // Get correct offsets
        offset       = this.offset(),
        parentOffset = rootNodeRE.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset()

      // Subtract element margins
      // note: when an element has margin: auto the offsetLeft and marginLeft
      // are the same in Safari causing offset.left to incorrectly be 0
      offset.top  -= parseFloat( $(elem).css('margin-top') ) || 0
      offset.left -= parseFloat( $(elem).css('margin-left') ) || 0

      // Add offsetParent borders
      parentOffset.top  += parseFloat( $(offsetParent[0]).css('border-top-width') ) || 0
      parentOffset.left += parseFloat( $(offsetParent[0]).css('border-left-width') ) || 0

      // Subtract the two offsets
      return {
        top:  offset.top  - parentOffset.top,
        left: offset.left - parentOffset.left
      }
    },
    offsetParent: function() {
      return this.map(function(){
        var parent = this.offsetParent || document.body
        while (parent && !rootNodeRE.test(parent.nodeName) && $(parent).css("position") == "static")
          parent = parent.offsetParent
        return parent
      })
    }
  }

  // for now
  $.fn.detach = $.fn.remove

  // Generate the `width` and `height` functions
  ;['width', 'height'].forEach(function(dimension){
    var dimensionProperty =
      dimension.replace(/./, function(m){ return m[0].toUpperCase() })

    $.fn[dimension] = function(value){
      var offset, el = this[0]
      if (value === undefined) return isWindow(el) ? el['inner' + dimensionProperty] :
        isDocument(el) ? el.documentElement['scroll' + dimensionProperty] :
        (offset = this.offset()) && offset[dimension]
      else return this.each(function(idx){
        el = $(this)
        el.css(dimension, funcArg(this, value, idx, el[dimension]()))
      })
    }
  })

  function traverseNode(node, fun) {
    fun(node)
    for (var i = 0, len = node.childNodes.length; i < len; i++)
      traverseNode(node.childNodes[i], fun)
  }

  // Generate the `after`, `prepend`, `before`, `append`,
  // `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.
  adjacencyOperators.forEach(function(operator, operatorIndex) {
    var inside = operatorIndex % 2 //=> prepend, append

    $.fn[operator] = function(){
      // arguments can be nodes, arrays of nodes, Zepto objects and HTML strings
      var argType, nodes = $.map(arguments, function(arg) {
            argType = type(arg)
            return argType == "object" || argType == "array" || arg == null ?
              arg : zepto.fragment(arg)
          }),
          parent, copyByClone = this.length > 1
      if (nodes.length < 1) return this

      return this.each(function(_, target){
        parent = inside ? target : target.parentNode

        // convert all methods to a "before" operation
        target = operatorIndex == 0 ? target.nextSibling :
                 operatorIndex == 1 ? target.firstChild :
                 operatorIndex == 2 ? target :
                 null

        var parentInDocument = $.contains(document.documentElement, parent)

        nodes.forEach(function(node){
          if (copyByClone) node = node.cloneNode(true)
          else if (!parent) return $(node).remove()

          parent.insertBefore(node, target)
          if (parentInDocument) traverseNode(node, function(el){
            if (el.nodeName != null && el.nodeName.toUpperCase() === 'SCRIPT' &&
               (!el.type || el.type === 'text/javascript') && !el.src)
              window['eval'].call(window, el.innerHTML)
          })
        })
      })
    }

    // after    => insertAfter
    // prepend  => prependTo
    // before   => insertBefore
    // append   => appendTo
    $.fn[inside ? operator+'To' : 'insert'+(operatorIndex ? 'Before' : 'After')] = function(html){
      $(html)[operator](this)
      return this
    }
  })

  zepto.Z.prototype = $.fn

  // Export internal API functions in the `$.zepto` namespace
  zepto.uniq = uniq
  zepto.deserializeValue = deserializeValue
  $.zepto = zepto

  return $
})()

window.Zepto = Zepto
window.$ === undefined && (window.$ = Zepto)

;(function($){
  var _zid = 1, undefined,
      slice = Array.prototype.slice,
      isFunction = $.isFunction,
      isString = function(obj){ return typeof obj == 'string' },
      handlers = {},
      specialEvents={},
      focusinSupported = 'onfocusin' in window,
      focus = { focus: 'focusin', blur: 'focusout' },
      hover = { mouseenter: 'mouseover', mouseleave: 'mouseout' }

  specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = 'MouseEvents'

  function zid(element) {
    return element._zid || (element._zid = _zid++)
  }
  function findHandlers(element, event, fn, selector) {
    event = parse(event)
    if (event.ns) var matcher = matcherFor(event.ns)
    return (handlers[zid(element)] || []).filter(function(handler) {
      return handler
        && (!event.e  || handler.e == event.e)
        && (!event.ns || matcher.test(handler.ns))
        && (!fn       || zid(handler.fn) === zid(fn))
        && (!selector || handler.sel == selector)
    })
  }
  function parse(event) {
    var parts = ('' + event).split('.')
    return {e: parts[0], ns: parts.slice(1).sort().join(' ')}
  }
  function matcherFor(ns) {
    return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)')
  }

  function eventCapture(handler, captureSetting) {
    return handler.del &&
      (!focusinSupported && (handler.e in focus)) ||
      !!captureSetting
  }

  function realEvent(type) {
    return hover[type] || (focusinSupported && focus[type]) || type
  }

  function add(element, events, fn, data, selector, delegator, capture){
    var id = zid(element), set = (handlers[id] || (handlers[id] = []))
    events.split(/\s/).forEach(function(event){
      if (event == 'ready') return $(document).ready(fn)
      var handler   = parse(event)
      handler.fn    = fn
      handler.sel   = selector
      // emulate mouseenter, mouseleave
      if (handler.e in hover) fn = function(e){
        var related = e.relatedTarget
        if (!related || (related !== this && !$.contains(this, related)))
          return handler.fn.apply(this, arguments)
      }
      handler.del   = delegator
      var callback  = delegator || fn
      handler.proxy = function(e){
        e = compatible(e)
        if (e.isImmediatePropagationStopped()) return
        e.data = data
        var result = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args))
        if (result === false) e.preventDefault(), e.stopPropagation()
        return result
      }
      handler.i = set.length
      set.push(handler)
      if ('addEventListener' in element)
        element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))
    })
  }
  function remove(element, events, fn, selector, capture){
    var id = zid(element)
    ;(events || '').split(/\s/).forEach(function(event){
      findHandlers(element, event, fn, selector).forEach(function(handler){
        delete handlers[id][handler.i]
      if ('removeEventListener' in element)
        element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))
      })
    })
  }

  $.event = { add: add, remove: remove }

  $.proxy = function(fn, context) {
    var args = (2 in arguments) && slice.call(arguments, 2)
    if (isFunction(fn)) {
      var proxyFn = function(){ return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments) }
      proxyFn._zid = zid(fn)
      return proxyFn
    } else if (isString(context)) {
      if (args) {
        args.unshift(fn[context], fn)
        return $.proxy.apply(null, args)
      } else {
        return $.proxy(fn[context], fn)
      }
    } else {
      throw new TypeError("expected function")
    }
  }

  $.fn.bind = function(event, data, callback){
    return this.on(event, data, callback)
  }
  $.fn.unbind = function(event, callback){
    return this.off(event, callback)
  }
  $.fn.one = function(event, selector, data, callback){
    return this.on(event, selector, data, callback, 1)
  }

  var returnTrue = function(){return true},
      returnFalse = function(){return false},
      ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$)/,
      eventMethods = {
        preventDefault: 'isDefaultPrevented',
        stopImmediatePropagation: 'isImmediatePropagationStopped',
        stopPropagation: 'isPropagationStopped'
      }

  function compatible(event, source) {
    if (source || !event.isDefaultPrevented) {
      source || (source = event)

      $.each(eventMethods, function(name, predicate) {
        var sourceMethod = source[name]
        event[name] = function(){
          this[predicate] = returnTrue
          return sourceMethod && sourceMethod.apply(source, arguments)
        }
        event[predicate] = returnFalse
      })

      if (source.defaultPrevented !== undefined ? source.defaultPrevented :
          'returnValue' in source ? source.returnValue === false :
          source.getPreventDefault && source.getPreventDefault())
        event.isDefaultPrevented = returnTrue
    }
    return event
  }

  function createProxy(event) {
    var key, proxy = { originalEvent: event }
    for (key in event)
      if (!ignoreProperties.test(key) && event[key] !== undefined) proxy[key] = event[key]

    return compatible(proxy, event)
  }

  $.fn.delegate = function(selector, event, callback){
    return this.on(event, selector, callback)
  }
  $.fn.undelegate = function(selector, event, callback){
    return this.off(event, selector, callback)
  }

  $.fn.live = function(event, callback){
    $(document.body).delegate(this.selector, event, callback)
    return this
  }
  $.fn.die = function(event, callback){
    $(document.body).undelegate(this.selector, event, callback)
    return this
  }

  $.fn.on = function(event, selector, data, callback, one){
    var autoRemove, delegator, $this = this
    if (event && !isString(event)) {
      $.each(event, function(type, fn){
        $this.on(type, selector, data, fn, one)
      })
      return $this
    }

    if (!isString(selector) && !isFunction(callback) && callback !== false)
      callback = data, data = selector, selector = undefined
    if (isFunction(data) || data === false)
      callback = data, data = undefined

    if (callback === false) callback = returnFalse

    return $this.each(function(_, element){
      if (one) autoRemove = function(e){
        remove(element, e.type, callback)
        return callback.apply(this, arguments)
      }

      if (selector) delegator = function(e){
        var evt, match = $(e.target).closest(selector, element).get(0)
        if (match && match !== element) {
          evt = $.extend(createProxy(e), {currentTarget: match, liveFired: element})
          return (autoRemove || callback).apply(match, [evt].concat(slice.call(arguments, 1)))
        }
      }

      add(element, event, callback, data, selector, delegator || autoRemove)
    })
  }
  $.fn.off = function(event, selector, callback){
    var $this = this
    if (event && !isString(event)) {
      $.each(event, function(type, fn){
        $this.off(type, selector, fn)
      })
      return $this
    }

    if (!isString(selector) && !isFunction(callback) && callback !== false)
      callback = selector, selector = undefined

    if (callback === false) callback = returnFalse

    return $this.each(function(){
      remove(this, event, callback, selector)
    })
  }

  $.fn.trigger = function(event, args){
    event = (isString(event) || $.isPlainObject(event)) ? $.Event(event) : compatible(event)
    event._args = args
    return this.each(function(){
      // handle focus(), blur() by calling them directly
      if (event.type in focus && typeof this[event.type] == "function") this[event.type]()
      // items in the collection might not be DOM elements
      else if ('dispatchEvent' in this) this.dispatchEvent(event)
      else $(this).triggerHandler(event, args)
    })
  }

  // triggers event handlers on current element just as if an event occurred,
  // doesn't trigger an actual event, doesn't bubble
  $.fn.triggerHandler = function(event, args){
    var e, result
    this.each(function(i, element){
      e = createProxy(isString(event) ? $.Event(event) : event)
      e._args = args
      e.target = element
      $.each(findHandlers(element, event.type || event), function(i, handler){
        result = handler.proxy(e)
        if (e.isImmediatePropagationStopped()) return false
      })
    })
    return result
  }

  // shortcut methods for `.bind(event, fn)` for each event type
  ;('focusin focusout focus blur load resize scroll unload click dblclick '+
  'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave '+
  'change select keydown keypress keyup error').split(' ').forEach(function(event) {
    $.fn[event] = function(callback) {
      return (0 in arguments) ?
        this.bind(event, callback) :
        this.trigger(event)
    }
  })

  $.Event = function(type, props) {
    if (!isString(type)) props = type, type = props.type
    var event = document.createEvent(specialEvents[type] || 'Events'), bubbles = true
    if (props) for (var name in props) (name == 'bubbles') ? (bubbles = !!props[name]) : (event[name] = props[name])
    event.initEvent(type, bubbles, true)
    return compatible(event)
  }

})(Zepto)

;(function($){
  var jsonpID = 0,
      document = window.document,
      key,
      name,
      rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
      scriptTypeRE = /^(?:text|application)\/javascript/i,
      xmlTypeRE = /^(?:text|application)\/xml/i,
      jsonType = 'application/json',
      htmlType = 'text/html',
      blankRE = /^\s*$/,
      originAnchor = document.createElement('a')

  originAnchor.href = window.location.href

  // trigger a custom event and return false if it was cancelled
  function triggerAndReturn(context, eventName, data) {
    var event = $.Event(eventName)
    $(context).trigger(event, data)
    return !event.isDefaultPrevented()
  }

  // trigger an Ajax "global" event
  function triggerGlobal(settings, context, eventName, data) {
    if (settings.global) return triggerAndReturn(context || document, eventName, data)
  }

  // Number of active Ajax requests
  $.active = 0

  function ajaxStart(settings) {
    if (settings.global && $.active++ === 0) triggerGlobal(settings, null, 'ajaxStart')
  }
  function ajaxStop(settings) {
    if (settings.global && !(--$.active)) triggerGlobal(settings, null, 'ajaxStop')
  }

  // triggers an extra global event "ajaxBeforeSend" that's like "ajaxSend" but cancelable
  function ajaxBeforeSend(xhr, settings) {
    var context = settings.context
    if (settings.beforeSend.call(context, xhr, settings) === false ||
        triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false)
      return false

    triggerGlobal(settings, context, 'ajaxSend', [xhr, settings])
  }
  function ajaxSuccess(data, xhr, settings, deferred) {
    var context = settings.context, status = 'success'
    settings.success.call(context, data, status, xhr)
    if (deferred) deferred.resolveWith(context, [data, status, xhr])
    triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data])
    ajaxComplete(status, xhr, settings)
  }
  // type: "timeout", "error", "abort", "parsererror"
  function ajaxError(error, type, xhr, settings, deferred) {
    var context = settings.context
    settings.error.call(context, xhr, type, error)
    if (deferred) deferred.rejectWith(context, [xhr, type, error])
    triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error || type])
    ajaxComplete(type, xhr, settings)
  }
  // status: "success", "notmodified", "error", "timeout", "abort", "parsererror"
  function ajaxComplete(status, xhr, settings) {
    var context = settings.context
    settings.complete.call(context, xhr, status)
    triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings])
    ajaxStop(settings)
  }

  // Empty function, used as default callback
  function empty() {}

  $.ajaxJSONP = function(options, deferred){
    if (!('type' in options)) return $.ajax(options)

    var _callbackName = options.jsonpCallback,
      callbackName = ($.isFunction(_callbackName) ?
        _callbackName() : _callbackName) || ('jsonp' + (++jsonpID)),
      script = document.createElement('script'),
      originalCallback = window[callbackName],
      responseData,
      abort = function(errorType) {
        $(script).triggerHandler('error', errorType || 'abort')
      },
      xhr = { abort: abort }, abortTimeout

    if (deferred) deferred.promise(xhr)

    $(script).on('load error', function(e, errorType){
      clearTimeout(abortTimeout)
      $(script).off().remove()

      if (e.type == 'error' || !responseData) {
        ajaxError(null, errorType || 'error', xhr, options, deferred)
      } else {
        ajaxSuccess(responseData[0], xhr, options, deferred)
      }

      window[callbackName] = originalCallback
      if (responseData && $.isFunction(originalCallback))
        originalCallback(responseData[0])

      originalCallback = responseData = undefined
    })

    if (ajaxBeforeSend(xhr, options) === false) {
      abort('abort')
      return xhr
    }

    window[callbackName] = function(){
      responseData = arguments
    }

    script.src = options.url.replace(/\?(.+)=\?/, '?$1=' + callbackName)
    document.head.appendChild(script)

    if (options.timeout > 0) abortTimeout = setTimeout(function(){
      abort('timeout')
    }, options.timeout)

    return xhr
  }

  $.ajaxSettings = {
    // Default type of request
    type: 'GET',
    // Callback that is executed before request
    beforeSend: empty,
    // Callback that is executed if the request succeeds
    success: empty,
    // Callback that is executed the the server drops error
    error: empty,
    // Callback that is executed on request complete (both: error and success)
    complete: empty,
    // The context for the callbacks
    context: null,
    // Whether to trigger "global" Ajax events
    global: true,
    // Transport
    xhr: function () {
      return new window.XMLHttpRequest()
    },
    // MIME types mapping
    // IIS returns Javascript as "application/x-javascript"
    accepts: {
      script: 'text/javascript, application/javascript, application/x-javascript',
      json:   jsonType,
      xml:    'application/xml, text/xml',
      html:   htmlType,
      text:   'text/plain'
    },
    // Whether the request is to another domain
    crossDomain: false,
    // Default timeout
    timeout: 0,
    // Whether data should be serialized to string
    processData: true,
    // Whether the browser should be allowed to cache GET responses
    cache: true
  }

  function mimeToDataType(mime) {
    if (mime) mime = mime.split(';', 2)[0]
    return mime && ( mime == htmlType ? 'html' :
      mime == jsonType ? 'json' :
      scriptTypeRE.test(mime) ? 'script' :
      xmlTypeRE.test(mime) && 'xml' ) || 'text'
  }

  function appendQuery(url, query) {
    if (query == '') return url
    return (url + '&' + query).replace(/[&?]{1,2}/, '?')
  }

  // serialize payload and append it to the URL for GET requests
  function serializeData(options) {
    if (options.processData && options.data && $.type(options.data) != "string")
      options.data = $.param(options.data, options.traditional)
    if (options.data && (!options.type || options.type.toUpperCase() == 'GET'))
      options.url = appendQuery(options.url, options.data), options.data = undefined
  }

  $.ajax = function(options){
    var settings = $.extend({}, options || {}),
        deferred = $.Deferred && $.Deferred(),
        urlAnchor
    for (key in $.ajaxSettings) if (settings[key] === undefined) settings[key] = $.ajaxSettings[key]

    ajaxStart(settings)

    if (!settings.crossDomain) {
      urlAnchor = document.createElement('a')
      urlAnchor.href = settings.url
      urlAnchor.href = urlAnchor.href
      settings.crossDomain = (originAnchor.protocol + '//' + originAnchor.host) !== (urlAnchor.protocol + '//' + urlAnchor.host)
    }

    if (!settings.url) settings.url = window.location.toString()
    serializeData(settings)

    var dataType = settings.dataType, hasPlaceholder = /\?.+=\?/.test(settings.url)
    if (hasPlaceholder) dataType = 'jsonp'

    if (settings.cache === false || (
         (!options || options.cache !== true) &&
         ('script' == dataType || 'jsonp' == dataType)
        ))
      settings.url = appendQuery(settings.url, '_=' + Date.now())

    if ('jsonp' == dataType) {
      if (!hasPlaceholder)
        settings.url = appendQuery(settings.url,
          settings.jsonp ? (settings.jsonp + '=?') : settings.jsonp === false ? '' : 'callback=?')
      return $.ajaxJSONP(settings, deferred)
    }

    var mime = settings.accepts[dataType],
        headers = { },
        setHeader = function(name, value) { headers[name.toLowerCase()] = [name, value] },
        protocol = /^([\w-]+:)\/\//.test(settings.url) ? RegExp.$1 : window.location.protocol,
        xhr = settings.xhr(),
        nativeSetHeader = xhr.setRequestHeader,
        abortTimeout

    if (deferred) deferred.promise(xhr)

    if (!settings.crossDomain) setHeader('X-Requested-With', 'XMLHttpRequest')
    setHeader('Accept', mime || '*/*')
    if (mime = settings.mimeType || mime) {
      if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0]
      xhr.overrideMimeType && xhr.overrideMimeType(mime)
    }
    if (settings.contentType || (settings.contentType !== false && settings.data && settings.type.toUpperCase() != 'GET'))
      setHeader('Content-Type', settings.contentType || 'application/x-www-form-urlencoded')

    if (settings.headers) for (name in settings.headers) setHeader(name, settings.headers[name])
    xhr.setRequestHeader = setHeader

    xhr.onreadystatechange = function(){
      if (xhr.readyState == 4) {
        xhr.onreadystatechange = empty
        clearTimeout(abortTimeout)
        var result, error = false
        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && protocol == 'file:')) {
          dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader('content-type'))
          result = xhr.responseText

          try {
            // http://perfectionkills.com/global-eval-what-are-the-options/
            if (dataType == 'script')    (1,eval)(result)
            else if (dataType == 'xml')  result = xhr.responseXML
            else if (dataType == 'json') result = blankRE.test(result) ? null : $.parseJSON(result)
          } catch (e) { error = e }

          if (error) ajaxError(error, 'parsererror', xhr, settings, deferred)
          else ajaxSuccess(result, xhr, settings, deferred)
        } else {
          ajaxError(xhr.statusText || null, xhr.status ? 'error' : 'abort', xhr, settings, deferred)
        }
      }
    }

    if (ajaxBeforeSend(xhr, settings) === false) {
      xhr.abort()
      ajaxError(null, 'abort', xhr, settings, deferred)
      return xhr
    }

    if (settings.xhrFields) for (name in settings.xhrFields) xhr[name] = settings.xhrFields[name]

    var async = 'async' in settings ? settings.async : true
    xhr.open(settings.type, settings.url, async, settings.username, settings.password)

    for (name in headers) nativeSetHeader.apply(xhr, headers[name])

    if (settings.timeout > 0) abortTimeout = setTimeout(function(){
        xhr.onreadystatechange = empty
        xhr.abort()
        ajaxError(null, 'timeout', xhr, settings, deferred)
      }, settings.timeout)

    // avoid sending empty string (#319)
    xhr.send(settings.data ? settings.data : null)
    return xhr
  }

  // handle optional data/success arguments
  function parseArguments(url, data, success, dataType) {
    if ($.isFunction(data)) dataType = success, success = data, data = undefined
    if (!$.isFunction(success)) dataType = success, success = undefined
    return {
      url: url
    , data: data
    , success: success
    , dataType: dataType
    }
  }

  $.get = function(/* url, data, success, dataType */){
    return $.ajax(parseArguments.apply(null, arguments))
  }

  $.post = function(/* url, data, success, dataType */){
    var options = parseArguments.apply(null, arguments)
    options.type = 'POST'
    return $.ajax(options)
  }

  $.getJSON = function(/* url, data, success */){
    var options = parseArguments.apply(null, arguments)
    options.dataType = 'json'
    return $.ajax(options)
  }

  $.fn.load = function(url, data, success){
    if (!this.length) return this
    var self = this, parts = url.split(/\s/), selector,
        options = parseArguments(url, data, success),
        callback = options.success
    if (parts.length > 1) options.url = parts[0], selector = parts[1]
    options.success = function(response){
      self.html(selector ?
        $('<div>').html(response.replace(rscript, "")).find(selector)
        : response)
      callback && callback.apply(self, arguments)
    }
    $.ajax(options)
    return this
  }

  var escape = encodeURIComponent

  function serialize(params, obj, traditional, scope){
    var type, array = $.isArray(obj), hash = $.isPlainObject(obj)
    $.each(obj, function(key, value) {
      type = $.type(value)
      if (scope) key = traditional ? scope :
        scope + '[' + (hash || type == 'object' || type == 'array' ? key : '') + ']'
      // handle data in serializeArray() format
      if (!scope && array) params.add(value.name, value.value)
      // recurse into nested objects
      else if (type == "array" || (!traditional && type == "object"))
        serialize(params, value, traditional, key)
      else params.add(key, value)
    })
  }

  $.param = function(obj, traditional){
    var params = []
    params.add = function(key, value) {
      if ($.isFunction(value)) value = value()
      if (value == null) value = ""
      this.push(escape(key) + '=' + escape(value))
    }
    serialize(params, obj, traditional)
    return params.join('&').replace(/%20/g, '+')
  }
})(Zepto)

;(function($){
  $.fn.serializeArray = function() {
    var name, type, result = [],
      add = function(value) {
        if (value.forEach) return value.forEach(add)
        result.push({ name: name, value: value })
      }
    if (this[0]) $.each(this[0].elements, function(_, field){
      type = field.type, name = field.name
      if (name && field.nodeName.toLowerCase() != 'fieldset' &&
        !field.disabled && type != 'submit' && type != 'reset' && type != 'button' && type != 'file' &&
        ((type != 'radio' && type != 'checkbox') || field.checked))
          add($(field).val())
    })
    return result
  }

  $.fn.serialize = function(){
    var result = []
    this.serializeArray().forEach(function(elm){
      result.push(encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value))
    })
    return result.join('&')
  }

  $.fn.submit = function(callback) {
    if (0 in arguments) this.bind('submit', callback)
    else if (this.length) {
      var event = $.Event('submit')
      this.eq(0).trigger(event)
      if (!event.isDefaultPrevented()) this.get(0).submit()
    }
    return this
  }

})(Zepto)

;(function($){
  // __proto__ doesn't exist on IE<11, so redefine
  // the Z function to use object extension instead
  if (!('__proto__' in {})) {
    $.extend($.zepto, {
      Z: function(dom, selector){
        dom = dom || []
        $.extend(dom, $.fn)
        dom.selector = selector || ''
        dom.__Z = true
        return dom
      },
      // this is a kludge but works
      isZ: function(object){
        return $.type(object) === 'array' && '__Z' in object
      }
    })
  }

  // getComputedStyle shouldn't freak out when called
  // without a valid element as argument
  try {
    getComputedStyle(undefined)
  } catch(e) {
    var nativeGetComputedStyle = getComputedStyle;
    window.getComputedStyle = function(element){
      try {
        return nativeGetComputedStyle(element)
      } catch(e) {
        return null
      }
    }
  }
})(Zepto)

;(function($){
  var touch = {},
    touchTimeout, tapTimeout, swipeTimeout, longTapTimeout,
    longTapDelay = 750,
    gesture

  function swipeDirection(x1, x2, y1, y2) {
    return Math.abs(x1 - x2) >=
      Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down')
  }

  function longTap() {
    longTapTimeout = null
    if (touch.last) {
      touch.el.trigger('longTap')
      touch = {}
    }
  }

  function cancelLongTap() {
    if (longTapTimeout) clearTimeout(longTapTimeout)
    longTapTimeout = null
  }

  function cancelAll() {
    if (touchTimeout) clearTimeout(touchTimeout)
    if (tapTimeout) clearTimeout(tapTimeout)
    if (swipeTimeout) clearTimeout(swipeTimeout)
    if (longTapTimeout) clearTimeout(longTapTimeout)
    touchTimeout = tapTimeout = swipeTimeout = longTapTimeout = null
    touch = {}
  }

  function isPrimaryTouch(event){
    return (event.pointerType == 'touch' ||
      event.pointerType == event.MSPOINTER_TYPE_TOUCH)
      && event.isPrimary
  }

  function isPointerEventType(e, type){
    return (e.type == 'pointer'+type ||
      e.type.toLowerCase() == 'mspointer'+type)
  }

  $(document).ready(function(){
    var now, delta, deltaX = 0, deltaY = 0, firstTouch, _isPointerType

    if ('MSGesture' in window) {
      gesture = new MSGesture()
      gesture.target = document.body
    }

    $(document)
      .bind('MSGestureEnd', function(e){
        var swipeDirectionFromVelocity =
          e.velocityX > 1 ? 'Right' : e.velocityX < -1 ? 'Left' : e.velocityY > 1 ? 'Down' : e.velocityY < -1 ? 'Up' : null;
        if (swipeDirectionFromVelocity) {
          touch.el.trigger('swipe')
          touch.el.trigger('swipe'+ swipeDirectionFromVelocity)
        }
      })
      .on('touchstart MSPointerDown pointerdown', function(e){
        if((_isPointerType = isPointerEventType(e, 'down')) &&
          !isPrimaryTouch(e)) return
        firstTouch = _isPointerType ? e : e.touches[0]
        if (e.touches && e.touches.length === 1 && touch.x2) {
          // Clear out touch movement data if we have it sticking around
          // This can occur if touchcancel doesn't fire due to preventDefault, etc.
          touch.x2 = undefined
          touch.y2 = undefined
        }
        now = Date.now()
        delta = now - (touch.last || now)
        touch.el = $('tagName' in firstTouch.target ?
          firstTouch.target : firstTouch.target.parentNode)
        touchTimeout && clearTimeout(touchTimeout)
        touch.x1 = firstTouch.pageX
        touch.y1 = firstTouch.pageY
        if (delta > 0 && delta <= 250) touch.isDoubleTap = true
        touch.last = now
        longTapTimeout = setTimeout(longTap, longTapDelay)
        // adds the current touch contact for IE gesture recognition
        if (gesture && _isPointerType) gesture.addPointer(e.pointerId);
      })
      .on('touchmove MSPointerMove pointermove', function(e){
        if((_isPointerType = isPointerEventType(e, 'move')) &&
          !isPrimaryTouch(e)) return
        firstTouch = _isPointerType ? e : e.touches[0]
        cancelLongTap()
        touch.x2 = firstTouch.pageX
        touch.y2 = firstTouch.pageY

        deltaX += Math.abs(touch.x1 - touch.x2)
        deltaY += Math.abs(touch.y1 - touch.y2)
      })
      .on('touchend MSPointerUp pointerup', function(e){
        if((_isPointerType = isPointerEventType(e, 'up')) &&
          !isPrimaryTouch(e)) return
        cancelLongTap()

        // swipe
        if ((touch.x2 && Math.abs(touch.x1 - touch.x2) > 30) ||
            (touch.y2 && Math.abs(touch.y1 - touch.y2) > 30))

          swipeTimeout = setTimeout(function() {
            touch.el.trigger('swipe')
            touch.el.trigger('swipe' + (swipeDirection(touch.x1, touch.x2, touch.y1, touch.y2)))
            touch = {}
          }, 0)

        // normal tap
        else if ('last' in touch)
          // don't fire tap when delta position changed by more than 30 pixels,
          // for instance when moving to a point and back to origin
          if (deltaX < 30 && deltaY < 30) {
            // delay by one tick so we can cancel the 'tap' event if 'scroll' fires
            // ('tap' fires before 'scroll')
            tapTimeout = setTimeout(function() {

              // trigger universal 'tap' with the option to cancelTouch()
              // (cancelTouch cancels processing of single vs double taps for faster 'tap' response)
              var event = $.Event('tap')
              event.cancelTouch = cancelAll
              touch.el.trigger(event)

              // trigger double tap immediately
              if (touch.isDoubleTap) {
                if (touch.el) touch.el.trigger('doubleTap')
                touch = {}
              }

              // trigger single tap after 250ms of inactivity
              else {
                touchTimeout = setTimeout(function(){
                  touchTimeout = null
                  if (touch.el) touch.el.trigger('singleTap')
                  touch = {}
                }, 250)
              }
            }, 0)
          } else {
            touch = {}
          }
          deltaX = deltaY = 0

      })
      // when the browser window loses focus,
      // for example when a modal dialog is shown,
      // cancel all ongoing events
      .on('touchcancel MSPointerCancel pointercancel', cancelAll)

    // scrolling the window indicates intention of the user
    // to scroll, not tap or swipe, so cancel all ongoing events
    $(window).on('scroll', cancelAll)
  })

  ;['swipe', 'swipeLeft', 'swipeRight', 'swipeUp', 'swipeDown',
    'doubleTap', 'tap', 'singleTap', 'longTap'].forEach(function(eventName){
    $.fn[eventName] = function(callback){ return this.on(eventName, callback) }
  })
})(Zepto)

;(function(undefined){
  if (String.prototype.trim === undefined) // fix for iOS 3.2
    String.prototype.trim = function(){ return this.replace(/^\s+|\s+$/g, '') }

  // For iOS 3.x
  // from https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/reduce
  if (Array.prototype.reduce === undefined)
    Array.prototype.reduce = function(fun){
      if(this === void 0 || this === null) throw new TypeError()
      var t = Object(this), len = t.length >>> 0, k = 0, accumulator
      if(typeof fun != 'function') throw new TypeError()
      if(len == 0 && arguments.length == 1) throw new TypeError()

      if(arguments.length >= 2)
       accumulator = arguments[1]
      else
        do{
          if(k in t){
            accumulator = t[k++]
            break
          }
          if(++k >= len) throw new TypeError()
        } while (true)

      while (k < len){
        if(k in t) accumulator = fun.call(undefined, accumulator, t[k], k, t)
        k++
      }
      return accumulator
    }

})()
/**
 * @fileOverview 基础方法
 * @ignore
 */

;(function($){
  
    if(!window.KUI){
    	window.KUI = {};
    }
    
    $.extend(KUI, {
    
		/**
		 * 实现类的继承，通过父类生成子类
		 * @param  {Function} subclass
		 * @param  {Function} superclass 父类构造函数
		 * @param  {Object} overrides  子类的属性或者方法
		 * @return {Function} 返回的子类构造函数
		 * 示例:
		 *      @example
		 *      //父类
		 *      function base(){
		 *  
		 *      }
		 *
		 *      function sub(){
		 * 
		 *      }
		 *      //子类
		 *      KUI.extend(sub,base,{
		 *          method : function(){
		 *    
		 *          }
		 *      });
		 *
		 *      //或者
		 *      var sub = KUI.extend(base,{});
		 */
		extend : function(subclass, superclass, overrides, staticOverrides){
			//如果只提供父类构造函数，则自动生成子类构造函数
			if(!$.isFunction(superclass)){

				overrides = superclass;
				superclass = subclass;
				subclass =  function(){};
			}

			var create = Object.create ?
				function (proto, c) {
					return Object.create(proto, {
						constructor: {
							value: c
						}
					});
				} :
				function (proto, c) {
					function F() {
					}

					F.prototype = proto;

					var o = new F();
					o.constructor = c;
					return o;
				};
			//new superclass(),
			//实例化父类作为子类的prototype
			var superObj = create(superclass.prototype, subclass);
			//指定子类的prototype
			subclass.prototype = $.extend({}, superObj, subclass.prototype);     
			subclass.superclass = create(superclass.prototype,superclass);
			$.extend(superObj, overrides);
			$.extend(subclass, staticOverrides);
			return subclass;
		},
		// clone 对象或数组
		clone : function(obj){
			var result = $.isArray(obj) ? [] : {};
			return $.extend(true, result, obj);
		}
		
		
    });

})(Zepto);/**
 * @fileOverview 观察者模式实现事件 - 基于zepto的事件机制，修改自BUI.Observable
 * @ignore
 */

;(function($){
  
  /**
   * @private
   * @class BUI.Observable.Callbacks
   * jquery 1.7 时存在 $.Callbacks,但是fireWith的返回结果是$.Callbacks 对象，
   * 而我们想要的效果是：当其中有一个函数返回为false时，阻止后面的执行，并返回false
   */
  var Callbacks = function(){
    this._init();
  };

  $.extend(Callbacks.prototype, {

    _functions : null,

    _init : function(){
      var _self = this;

      _self._functions = [];
    },
    /**
     * 添加回调函数
     * @param {Function} fn 回调函数
     */
    add:function(fn){
      this._functions.push(fn);
    },
    /**
     * 移除回调函数
     * @param  {Function} fn 回调函数
     */
    remove : function(fn){
      var functions = this._functions;
        index = $.inArray(fn,functions);
      if(index>=0){
        functions.splice(index,1);
      }
    },
    /**
     * 清空事件
     */
    empty : function(){
      var length = this._functions.length; //ie6,7下，必须指定需要删除的数量
      this._functions.splice(0,length);
    },
    /**
     * 暂停事件
     */
    pause : function(){
      this._paused = true;
    },
    /**
     * 唤醒事件
     */
    resume : function(){
      this._paused = false;
    },
    /**
     * 触发回调
     * @param  {Object} scope 上下文
     * @param  {Array} args  回调函数的参数
     * @return {Boolean|undefined} 当其中有一个函数返回为false时，阻止后面的执行，并返回false
     */
    fireWith : function(scope,args){
      var _self = this,
        rst;
      if(this._paused){
        return;
      }
      $.each(_self._functions,function(i, fn){
        rst = fn.apply(scope,args);
        if(rst === false){
          return false;
        }
      });
      return rst;
    }
  });

  function getCallbacks(){
    return new Callbacks();
  }
  /**
   * 支持事件的对象，参考观察者模式
   *  - 此类提供事件绑定
   *  - 提供事件冒泡机制
   *
   * <pre><code>
   *   var control = new Control();
   *   control.on('click',function(ev){
   *   
   *   });
   *
   *   control.off();  //移除所有事件
   * </code></pre>
   * @class BUI.Observable
   * @abstract
   * @param {Object} config 配置项键值对
   */
  var Observable = function(config){
        this._events = [];
        this._eventMap = {};
        this._bubblesEvents = [];
    this._initEvents(config);
  };

  $.extend(Observable.prototype, {

    /**
     * @cfg {Object} listeners 
     *  初始化事件,快速注册事件
     *  <pre><code>
     *    var list = new BUI.List.SimpleList({
     *      listeners : {
     *        itemclick : function(ev){},
     *        itemrendered : function(ev){}
     *      },
     *      items : []
     *    });
     *    list.render();
     *  </code></pre>
     */
    
    /**
     * @cfg {Function} handler
     * 点击事件的处理函数，快速配置点击事件而不需要写listeners属性
     * <pre><code>
     *    var list = new BUI.List.SimpleList({
     *      handler : function(ev){} //click 事件
     *    });
     *    list.render();
     *  </code></pre>
     */
    
    /**
     * 支持的事件名列表
     * @private
     */
    _events:[],

    /**
     * 绑定的事件
     * @private
     */
    _eventMap : {},

    _bubblesEvents : [],

    _bubbleTarget : null,

    //获取回调集合
    _getCallbacks : function(eventType){
      var _self = this,
        eventMap = _self._eventMap;
      return eventMap[eventType];
    },
    //初始化事件列表
    _initEvents : function(config){
      var _self = this,
        listeners = null; 

      if(!config){
        return;
      }
      listeners = config.listeners || {};
      if(config.handler){
        listeners.click = config.handler;
      }
      if(listeners){
        for (var name in listeners) {
          if(listeners.hasOwnProperty(name)){
            _self.on(name,listeners[name]);
          }
        };
      }
    },
    //事件是否支持冒泡
    _isBubbles : function (eventType) {
        return $.inArray(eventType,this._bubblesEvents) >= 0;
    },
    /**
     * 添加冒泡的对象
     * @protected
     * @param {Object} target  冒泡的事件源
     */
    addTarget : function(target) {
        this._bubbleTarget = target;
    },
    /**
     * 添加支持的事件
     * @protected
     * @param {String|String[]} events 事件
     */
    addEvents : function(events){
      var _self = this,
        existEvents = _self._events,
        eventMap = _self._eventMap;

      function addEvent(eventType){
        if($.inArray(eventType,existEvents) === -1){
          eventMap[eventType] = getCallbacks();
          existEvents.push(eventType);
        }
      }
      if($.isArray(events)){
        $.each(events,function(index,eventType){
          addEvent(eventType);
        });
      }else{
        addEvent(events);
      }
    },
    /**
     * 移除所有绑定的事件
     * @protected
     */
    clearListeners : function(){
      var _self = this,
        eventMap = _self._eventMap;
      for(var name in eventMap){
        if(eventMap.hasOwnProperty(name)){
          eventMap[name].empty();
        }
      }
    },
    /**
     * 触发事件
     * <pre><code>
     *   //绑定事件
     *   list.on('itemclick',function(ev){
     *     alert('21');
     *   });
     *   //触发事件
     *   list.fire('itemclick');
     * </code></pre>
     * @param  {String} eventType 事件类型
     * @param  {Object} eventData 事件触发时传递的数据
     * @return {Boolean|undefined}  如果其中一个事件处理器返回 false , 则返回 false, 否则返回最后一个事件处理器的返回值
     */
    fire : function(eventType,eventData){
      var _self = this,
        callbacks = _self._getCallbacks(eventType),
        args = $.grep(arguments, function(item){
        	return item;
        }),
        result;
      if(!eventData){
        eventData = {};
        args.push(eventData);
      }
      if(!eventData.target){
        eventData.target = _self;
      }
      if(callbacks){
        result = callbacks.fireWith(_self,Array.prototype.slice.call(args,1));
      }
      if(_self._isBubbles(eventType)){
          var bubbleTarget = _self._bubbleTarget;
          if(bubbleTarget && bubbleTarget.fire){
              bubbleTarget.fire(eventType,eventData);
          }
      }
      return result;
    },
    /**
     * 暂停事件的执行
     * <pre><code>
     *  list.pauseEvent('itemclick');
     * </code></pre>
     * @param  {String} eventType 事件类型
     */
    pauseEvent : function(eventType){
      var _self = this,
        callbacks = _self._getCallbacks(eventType);
      callbacks && callbacks.pause();
    },
    /**
     * 唤醒事件
     * <pre><code>
     *  list.resumeEvent('itemclick');
     * </code></pre>
     * @param  {String} eventType 事件类型
     */
    resumeEvent : function(eventType){
      var _self = this,
        callbacks = _self._getCallbacks(eventType);
      callbacks && callbacks.resume();
    },
    /**
     * 添加绑定事件
     * <pre><code>
     *   //绑定单个事件
     *   list.on('itemclick',function(ev){
     *     alert('21');
     *   });
     *   //绑定多个事件
     *   list.on('itemrendered itemupdated',function(){
     *     //列表项创建、更新时触发操作
     *   });
     * </code></pre>
     * @param  {String}   eventType 事件类型
     * @param  {Function} fn        回调函数
     */
    on : function(eventType,fn){
      //一次监听多个事件
      var arr = eventType.split(' '),
        _self = this,
        callbacks =null;
      if(arr.length > 1){
        $.each(arr,function(i, name){
          _self.on(name,fn);
        });
      }else{
        callbacks = _self._getCallbacks(eventType);
        if(callbacks){
          callbacks.add(fn);
        }else{
          _self.addEvents(eventType);
          _self.on(eventType,fn);
        }
      }
      return _self;
    },
    /**
     * 移除绑定的事件
     * <pre><code>
     *  //移除所有事件
     *  list.off();
     *  
     *  //移除特定事件
     *  function callback(ev){}
     *  list.on('click',callback);
     *
     *  list.off('click',callback);//需要保存回调函数的引用
     * 
     * </code></pre>
     * @param  {String}   eventType 事件类型
     * @param  {Function} fn        回调函数
     */
    off : function(eventType,fn){
      if(!eventType && !fn){
        this.clearListeners();
        return this;
      }
      var _self = this,
        callbacks = _self._getCallbacks(eventType);
      if(callbacks){
        if(fn){
          callbacks.remove(fn);
        }else{
          callbacks.empty();
        }
        
      }
      return _self;
    },
    /**
     * 配置事件是否允许冒泡
     * @protected
     * @param  {String} eventType 支持冒泡的事件
     * @param  {Object} cfg 配置项
     * @param {Boolean} cfg.bubbles 是否支持冒泡
     */
    publish : function(eventType, cfg){
      var _self = this,
          bubblesEvents = _self._bubblesEvents;

      if(cfg.bubbles){
          if($.inArray(eventType,bubblesEvents) === -1){
              bubblesEvents.push(eventType);
          }
      }else{
          var index = $.inArray(eventType,bubblesEvents);
          if(index !== -1){
              bubblesEvents.splice(index,1);
          }
      }
    }
  });
  
    if(!window.KUI){
    	window.KUI = {};
    }
    KUI.Event = Observable;

})(Zepto);/*
 * Zepto MD5 Plugin 1.2.1
 * https://github.com/blueimp/Zepto-MD5
 *
 * Copyright 2010, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://creativecommons.org/licenses/MIT/
 * 
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

/*jslint bitwise: true */
/*global unescape, Zepto */

;(function ($) {
    'use strict';

    /*
    * Add integers, wrapping at 2^32. This uses 16-bit operations internally
    * to work around bugs in some JS interpreters.
    */
    function safe_add(x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF),
            msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    }

    /*
    * Bitwise rotate a 32-bit number to the left.
    */
    function bit_rol(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    }

    /*
    * These functions implement the four basic operations the algorithm uses.
    */
    function md5_cmn(q, a, b, x, s, t) {
        return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
    }
    function md5_ff(a, b, c, d, x, s, t) {
        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    }
    function md5_gg(a, b, c, d, x, s, t) {
        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    }
    function md5_hh(a, b, c, d, x, s, t) {
        return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5_ii(a, b, c, d, x, s, t) {
        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    }

    /*
    * Calculate the MD5 of an array of little-endian words, and a bit length.
    */
    function binl_md5(x, len) {
        /* append padding */
        x[len >> 5] |= 0x80 << ((len) % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;

        var i, olda, oldb, oldc, oldd,
            a =  1732584193,
            b = -271733879,
            c = -1732584194,
            d =  271733878;

        for (i = 0; i < x.length; i += 16) {
            olda = a;
            oldb = b;
            oldc = c;
            oldd = d;

            a = md5_ff(a, b, c, d, x[i],       7, -680876936);
            d = md5_ff(d, a, b, c, x[i +  1], 12, -389564586);
            c = md5_ff(c, d, a, b, x[i +  2], 17,  606105819);
            b = md5_ff(b, c, d, a, x[i +  3], 22, -1044525330);
            a = md5_ff(a, b, c, d, x[i +  4],  7, -176418897);
            d = md5_ff(d, a, b, c, x[i +  5], 12,  1200080426);
            c = md5_ff(c, d, a, b, x[i +  6], 17, -1473231341);
            b = md5_ff(b, c, d, a, x[i +  7], 22, -45705983);
            a = md5_ff(a, b, c, d, x[i +  8],  7,  1770035416);
            d = md5_ff(d, a, b, c, x[i +  9], 12, -1958414417);
            c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
            b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = md5_ff(a, b, c, d, x[i + 12],  7,  1804603682);
            d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = md5_ff(b, c, d, a, x[i + 15], 22,  1236535329);

            a = md5_gg(a, b, c, d, x[i +  1],  5, -165796510);
            d = md5_gg(d, a, b, c, x[i +  6],  9, -1069501632);
            c = md5_gg(c, d, a, b, x[i + 11], 14,  643717713);
            b = md5_gg(b, c, d, a, x[i],      20, -373897302);
            a = md5_gg(a, b, c, d, x[i +  5],  5, -701558691);
            d = md5_gg(d, a, b, c, x[i + 10],  9,  38016083);
            c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = md5_gg(b, c, d, a, x[i +  4], 20, -405537848);
            a = md5_gg(a, b, c, d, x[i +  9],  5,  568446438);
            d = md5_gg(d, a, b, c, x[i + 14],  9, -1019803690);
            c = md5_gg(c, d, a, b, x[i +  3], 14, -187363961);
            b = md5_gg(b, c, d, a, x[i +  8], 20,  1163531501);
            a = md5_gg(a, b, c, d, x[i + 13],  5, -1444681467);
            d = md5_gg(d, a, b, c, x[i +  2],  9, -51403784);
            c = md5_gg(c, d, a, b, x[i +  7], 14,  1735328473);
            b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

            a = md5_hh(a, b, c, d, x[i +  5],  4, -378558);
            d = md5_hh(d, a, b, c, x[i +  8], 11, -2022574463);
            c = md5_hh(c, d, a, b, x[i + 11], 16,  1839030562);
            b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = md5_hh(a, b, c, d, x[i +  1],  4, -1530992060);
            d = md5_hh(d, a, b, c, x[i +  4], 11,  1272893353);
            c = md5_hh(c, d, a, b, x[i +  7], 16, -155497632);
            b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = md5_hh(a, b, c, d, x[i + 13],  4,  681279174);
            d = md5_hh(d, a, b, c, x[i],      11, -358537222);
            c = md5_hh(c, d, a, b, x[i +  3], 16, -722521979);
            b = md5_hh(b, c, d, a, x[i +  6], 23,  76029189);
            a = md5_hh(a, b, c, d, x[i +  9],  4, -640364487);
            d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = md5_hh(c, d, a, b, x[i + 15], 16,  530742520);
            b = md5_hh(b, c, d, a, x[i +  2], 23, -995338651);

            a = md5_ii(a, b, c, d, x[i],       6, -198630844);
            d = md5_ii(d, a, b, c, x[i +  7], 10,  1126891415);
            c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = md5_ii(b, c, d, a, x[i +  5], 21, -57434055);
            a = md5_ii(a, b, c, d, x[i + 12],  6,  1700485571);
            d = md5_ii(d, a, b, c, x[i +  3], 10, -1894986606);
            c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = md5_ii(b, c, d, a, x[i +  1], 21, -2054922799);
            a = md5_ii(a, b, c, d, x[i +  8],  6,  1873313359);
            d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = md5_ii(c, d, a, b, x[i +  6], 15, -1560198380);
            b = md5_ii(b, c, d, a, x[i + 13], 21,  1309151649);
            a = md5_ii(a, b, c, d, x[i +  4],  6, -145523070);
            d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = md5_ii(c, d, a, b, x[i +  2], 15,  718787259);
            b = md5_ii(b, c, d, a, x[i +  9], 21, -343485551);

            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
        }
        return [a, b, c, d];
    }

    /*
    * Convert an array of little-endian words to a string
    */
    function binl2rstr(input) {
        var i,
            output = '';
        for (i = 0; i < input.length * 32; i += 8) {
            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
        }
        return output;
    }

    /*
    * Convert a raw string to an array of little-endian words
    * Characters >255 have their high-byte silently ignored.
    */
    function rstr2binl(input) {
        var i,
            output = [];
        output[(input.length >> 2) - 1] = undefined;
        for (i = 0; i < output.length; i += 1) {
            output[i] = 0;
        }
        for (i = 0; i < input.length * 8; i += 8) {
            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
        }
        return output;
    }

    /*
    * Calculate the MD5 of a raw string
    */
    function rstr_md5(s) {
        return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));
    }

    /*
    * Calculate the HMAC-MD5, of a key and some data (raw strings)
    */
    function rstr_hmac_md5(key, data) {
        var i,
            bkey = rstr2binl(key),
            ipad = [],
            opad = [],
            hash;
        ipad[15] = opad[15] = undefined;                        
        if (bkey.length > 16) {
            bkey = binl_md5(bkey, key.length * 8);
        }
        for (i = 0; i < 16; i += 1) {
            ipad[i] = bkey[i] ^ 0x36363636;
            opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }
        hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
        return binl2rstr(binl_md5(opad.concat(hash), 512 + 128));
    }

    /*
    * Convert a raw string to a hex string
    */
    function rstr2hex(input) {
        var hex_tab = '0123456789abcdef',
            output = '',
            x,
            i;
        for (i = 0; i < input.length; i += 1) {
            x = input.charCodeAt(i);
            output += hex_tab.charAt((x >>> 4) & 0x0F) +
                hex_tab.charAt(x & 0x0F);
        }
        return output;
    }

    /*
    * Encode a string as utf-8
    */
    function str2rstr_utf8(input) {
        return unescape(encodeURIComponent(input));
    }

    /*
    * Take string arguments and return either raw or hex encoded strings
    */
    function raw_md5(s) {
        return rstr_md5(str2rstr_utf8(s));
    }
    function hex_md5(s) {
        return rstr2hex(raw_md5(s));
    }
    function raw_hmac_md5(k, d) {
        return rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d));
    }
    function hex_hmac_md5(k, d) {
        return rstr2hex(raw_hmac_md5(k, d));
    }
    
    $.md5 = function (string, key, raw) {
        if (!key) {
            if (!raw) {
                return hex_md5(string);
            } else {
                return raw_md5(string);
            }
        }
        if (!raw) {
            return hex_hmac_md5(key, string);
        } else {
            return raw_hmac_md5(key, string);
        }
    };
    
}(typeof Zepto === 'function' ? Zepto : this));/* KOP - 接口平台接入 */
;(function($){
	
	var reLoginCode = [999601, 999602, 620014];
	
	var KOP = function(config){
		var _self = this;
		_self.config = $.extend({}, KOP.config, (window.KOPConfig || {}), config);
		_self._init();
	};
	KOP.config = {
		host: 'daijia.kuaidadi.com',
		isHttps: false,
		appKey: 'h5appbcd0af7461691c1e30bcd61098f',
		appSec: 'h5app07a02944776b7638e9b90793363',  
		ttid: 'h5',
		userRole: 1,
		appVersion: '1.0.0',
		apiVersion: '1.0.0',
		osType: 3,
		osVersion: '1.0.0',
		hwId: '10000',
		//mobileType: window.navigator.userAgent || 'web',
		mobileType: 'web',
		clientSource: null,
		reLoginFunc: null
	};
	
	$.extend(KOP.prototype, {	
		_init: function(){
			var _self = this;
			_self.kopUrlHost = (_self.config.isHttps ? 'https' : 'http') + '://' + _self.config.host + '/gateway?';
			// 初始化统计对象
			if(KUI.Analytics){
				_self.analytics = new KUI.Analytics();
			}
			// 过渡方案，测试环境适配
			if(_self.config.host != 'daijia.kuaidadi.com' && _self.config.host != '121.41.20.166'){
				_self.config.appKey = 'h5appae0ebdf4f3fbf97bfe6edefacaf';
				_self.config.appSec = 'h5app39ce75d444c86fa60db9882103c';
			}
		},
		errMsg: function(code, msg){
			var _msg = msg;
			if(code >= 999000){
				_msg = '系统繁忙，请稍候再试';
				if(code == 999601){
					_msg = '您的账号已在其他设备登录';
				}else if(code == 999602){
					_msg = '请重新登录';
				}
			}else if(code == 620014){
				_msg = '您的账户已被冻结';
			}
			return _msg;
		},
		send: function(apiConfig, paramData, loginParam, riskParam, callback, errback){
			// 兼容1.1.1的参数写法
			if(loginParam && (!$.isPlainObject(loginParam))){
				loginParam = {
					uid: loginParam,
					token: riskParam
				};
				riskParam = null;
			}
			
			var _self = this,
				getInfo = _self._getInfo(apiConfig, paramData, loginParam, riskParam),
				url = _self.kopUrlHost + getInfo.info,
				// 请求配置
				ajaxParam = {
					type: 'POST',
					url: url,
					data: encodeURIComponent(JSON.stringify(paramData)),
					contentType: 'text/plain',
					dataType: 'json',
					success: function(data, status, xhr){
						if(status === 'success'){
							if(data && data.code === 200){
								var _data = null;
								if(data.data){
									if($.isPlainObject(data.data)){
										_data = data.data;
									}else{
										try{
											_data = JSON.parse(data.data);
										}catch(e){
											_data = data.data;
										}
									}
								}
								callback && callback(_data);
							}else{
								var msg = _self.errMsg(data.code, data.msg);
								errback && errback(data.code, msg);
								if($.inArray(data.code, reLoginCode) > -1){
									_self.config.reLoginFunc && _self.config.reLoginFunc(data.code, msg);
								}
								_self._errorGa(['kopError', JSON.stringify(data), JSON.stringify(paramData) || '', url, getInfo.signStr]);
							}
						}else{
							errback && errback(status, '请求出错~');
							_self._errorGa(['ajaxError', status, JSON.stringify(data)]);
						}
					},
					error: function(xhr, errorType, error){
						errback && errback(errorType, '网络异常~');
						_self._errorGa(['requestError', errorType, JSON.stringify(error)]);
					}
				};
			// 风控参数	
			if(riskParam){
				ajaxParam.headers = {
					"kopds": encodeURIComponent(JSON.stringify(riskParam))
				};
			}
			
			$.ajax(ajaxParam);
						
		},
		// 报错埋点
		_errorGa: function(mList){
			var _self = this,
				msg = ['kopError'];
			msg = msg.concat(mList);
			_self.analytics && _self.analytics.error(msg.join('|'), true);
		},
		_getInfo: function(apiConfig, paramData, loginParam, riskParam){
			var _self = this,
				config = _self.config,
				ts = new Date().getTime(),
				api = $.isPlainObject(apiConfig) ? apiConfig.api : apiConfig,
				apiVersion = $.isPlainObject(apiConfig) ? apiConfig.version : config.apiVersion,
				sign = _self._getSign(api, apiVersion, paramData, loginParam, riskParam, ts),
				info = [
					'api=' + api,
					'apiVersion=' + apiVersion,
					'appKey=' + config.appKey,
					'appVersion=' + config.appVersion,
					'hwId=' + config.hwId,
					//'mobileType=' + encodeURIComponent(config.mobileType),
					'mobileType=' + config.mobileType,
					'osType=' + config.osType,
					'osVersion=' + config.osVersion,
					'sign=' + sign.sign,
					'timestamp=' + ts,
					'ttid=' + config.ttid,
					'userRole=' + config.userRole
				];
			if(loginParam && loginParam.token){
				info.push('token=' + loginParam.token);
			}
			if(loginParam && loginParam.uid){
				info.push('userId=' + loginParam.uid);
			}
			if(config.clientSource){
				info.push('clientSource=' + config.clientSource);
			}
			return {
				'info': info.join('&'),
				'signStr': sign.signStr,
				'sign': sign.sign
			};		
		},
		_getSign: function(api, apiVersion, paramData, loginParam, riskParam, ts){
			var _self = this,
				config = _self.config,
				signObj = {
					'api': api,
					'apiVersion': apiVersion,
					'appKey': config.appKey,
					'appVersion': config.appVersion,
					'hwId': config.hwId,
					'mobileType': config.mobileType,
					'osType': config.osType,
					'osVersion': config.osVersion,
					'timestamp': ts,
					'ttid': config.ttid,
					'userRole': config.userRole
				},
				signIndex,
				sign = [],
				_sign;
			if(loginParam && loginParam.token){
				signObj['token'] = loginParam.token;
			}
			if(loginParam && loginParam.uid){
				signObj['userId'] = loginParam.uid;
			}
			if(config.clientSource){
				signObj['clientSource'] = config.clientSource;
			}
			signObj = $.extend(signObj, paramData);
			signIndex = $.map(signObj, function(value, key){
				return key;
			});
			// 降序排列
			signIndex = signIndex.sort(function(a, b){
				return a < b ? 1 : -1;
			});
			//signIndex = signIndex.sort();
			
			$.each(signIndex, function(i, item){
				sign.push(item + signObj[item]);
			});
			
			sign = config.appSec + sign.join('') + config.appSec;	
			
			//sign = $.md5(sign);
			
			// base64
			_sign = _self.utf16to8(sign);
			_sign = _self.base64encode(_sign);
			// sha1加密
			_sign = CryptoJS.SHA1(_sign).toString();
					
			return {
				'signStr': sign,
				'sign': _sign
			};
		},

		base64encode: function(str){
			var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
			var out, i, len;
			var c1, c2, c3;
			len = str.length;
			i = 0;
			out = "";
			while (i < len) {
				c1 = str.charCodeAt(i++) & 0xff;
				if (i == len) {
					out += base64EncodeChars.charAt(c1 >> 2);
					out += base64EncodeChars.charAt((c1 & 0x3) << 4);
					out += "==";
					break;
				}
				c2 = str.charCodeAt(i++);
				if (i == len) {
					out += base64EncodeChars.charAt(c1 >> 2);
					out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
					out += base64EncodeChars.charAt((c2 & 0xF) << 2);
					out += "=";
					break;
				}
				c3 = str.charCodeAt(i++);
				out += base64EncodeChars.charAt(c1 >> 2);
				out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
				out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
				out += base64EncodeChars.charAt(c3 & 0x3F);
			}
			return out;
		},
		
		utf16to8: function(str){  
		　　var out, i, len, c;  
		　　out = "";  
		　　len = str.length;  
		　　for(i = 0; i < len; i++) {  
				c = str.charCodeAt(i);  
				if ((c >= 0x0001) && (c <= 0x007F)) {  
				　　 out += str.charAt(i);  
				} else if (c > 0x07FF) {  
				　　 out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));  
				　　 out += String.fromCharCode(0x80 | ((c >>　6) & 0x3F));  
				　　 out += String.fromCharCode(0x80 | ((c >>　0) & 0x3F));  
				} else {  
				　　 out += String.fromCharCode(0xC0 | ((c >>　6) & 0x1F));  
				　　 out += String.fromCharCode(0x80 | ((c >>　0) & 0x3F));  
				}  
		　　}  
		　　return out;  
		}
		
	});	
    
    if(!window.KUI){
    	window.KUI = {};
    }
    KUI.KOP = KOP;

})(Zepto);
/* Zepto 1.1.6 - detect - zeptojs.com/license */

;(function($){
  function detect(ua, platform){
    var os = this.os = {}, browser = this.browser = {},
      webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/),
      android = ua.match(/(Android);?[\s\/]+([\d.]+)?/),
      osx = !!ua.match(/\(Macintosh\; Intel /),
      ipad = ua.match(/(iPad).*OS\s([\d_]+)/),
      ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/),
      iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/),
      webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/),
      win = /Win\d{2}|Windows/.test(platform),
      wp = ua.match(/Windows Phone ([\d.]+)/),
      touchpad = webos && ua.match(/TouchPad/),
      kindle = ua.match(/Kindle\/([\d.]+)/),
      silk = ua.match(/Silk\/([\d._]+)/),
      blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/),
      bb10 = ua.match(/(BB10).*Version\/([\d.]+)/),
      rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/),
      playbook = ua.match(/PlayBook/),
      chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/),
      firefox = ua.match(/Firefox\/([\d.]+)/),
      ie = ua.match(/MSIE\s([\d.]+)/) || ua.match(/Trident\/[\d](?=[^\?]+).*rv:([0-9.].)/),
      webview = !chrome && ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/),
      safari = webview || ua.match(/Version\/([\d.]+)([^S](Safari)|[^M]*(Mobile)[^S]*(Safari))/)

    // Todo: clean this up with a better OS/browser seperation:
    // - discern (more) between multiple browsers on android
    // - decide if kindle fire in silk mode is android or not
    // - Firefox on Android doesn't specify the Android version
    // - possibly devide in os, device and browser hashes

    if (browser.webkit = !!webkit) browser.version = webkit[1]

    if (android) os.android = true, os.version = android[2]
    if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.')
    if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.')
    if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null
    if (wp) os.wp = true, os.version = wp[1]
    if (webos) os.webos = true, os.version = webos[2]
    if (touchpad) os.touchpad = true
    if (blackberry) os.blackberry = true, os.version = blackberry[2]
    if (bb10) os.bb10 = true, os.version = bb10[2]
    if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2]
    if (playbook) browser.playbook = true
    if (kindle) os.kindle = true, os.version = kindle[1]
    if (silk) browser.silk = true, browser.version = silk[1]
    if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true
    if (chrome) browser.chrome = true, browser.version = chrome[1]
    if (firefox) browser.firefox = true, browser.version = firefox[1]
    if (ie) browser.ie = true, browser.version = ie[1]
    if (safari && (osx || os.ios || win)) {
      browser.safari = true
      if (!os.ios) browser.version = safari[1]
    }
    if (webview) browser.webview = true

    os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
      (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)))
    os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos || blackberry || bb10 ||
      (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
      (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))))
  }

  detect.call($, navigator.userAgent, navigator.platform)
  // make available to unit tests
  $.__detect = detect

})(Zepto)
/* native 相关 */

;(function($) {
	var Native = function(config){
		var _self = this;
		_self.config = $.extend({}, Native.config, config);
		_self._init();
	};
	Native.config = {
	};
	
	KUI.extend(Native, KUI.Event);
	
	$.extend(Native.prototype, {
		registerHandler: function(name, func){
			var _self = this,
				bridge = _self.bridge;
			if(bridge){
				if(!!$.os.ios){
					_self._registerHandlerIOS(name, func);
					return true;
				}else if(!!$.os.android){
					_self._registerHandlerAndroid(name, func);
					return true;
				}else{
					return false;
				}
			}else{
				_self.on('ready', function(e){
					_self.registerHandler(name, func);
				});
				return false;
			}
		},
		callHandler: function(name, data, callback){
			data = data || null;
			var _self = this,
				bridge = _self.bridge;
			if(bridge){
				if(!!$.os.ios){
					_self._callHandlerIOS(name, data, callback);
					return true;
				}else if(!!$.os.android){
					_self._callHandlerAndroid(name, data, callback);
					return true;
				}else{
					return false;
				}
			}else{
				_self.on('ready', function(e){
					_self.callHandler(name, data, callback);
				});
				return false;
			}
		},
		send: function(data, callback){
			var _self = this,
				bridge = _self.bridge;
			if(bridge){
				if(!!$.os.ios){
					_self._sendIOS(data, callback);
					return true;
				}else if(!!$.os.android){
					_self._sendAndroid(data, callback);
					return true;
				}else{
					return false;
				}
			}else{
				_self.on('ready', function(e){
					_self.send(data, callback);
				});
				return false;
			}
		},
		// 确认框
		confirm: function(msg, callback){
			var _self = this,
				bridge = _self.bridge;
			if(!!$.os.ios){
				if(bridge){
					_self._callHandlerIOS('confirm', msg, callback);
					return true;
				}else{
					_self.on('ready', function(e){
						_self.confirm(msg, callback);
					});
					return false;
				}
			}else{
				if(confirm(msg)){
					callback && callback();
				}
				return true;
			}
		},
		// 提示框
		alert: function(msg){
			var _self = this,
				bridge = _self.bridge;
			if(!!$.os.ios){
				if(bridge){
					_self._callHandlerIOS('alert', msg);
					return true;
				}else{
					_self.on('ready', function(e){
						_self.alert(msg);
					});
					return false;
				}
			}else{
				alert(msg);
				return true;
			}
		},
		toast: function(msg){
			var _self = this;
			if(!!$.os.ios || !!$.os.android){
				return _self.callHandler('showToast', msg);
			}else{
				alert(msg);
				return true;
			}
		},
		
		_init: function(){
			var _self = this,
				cback = function(bridge){
					_self.bridge = bridge;
					_self.fire('ready', {bridge: bridge});
					// 清空ready事件列表
					_self.off('ready');
					console.log('Native Ready ~');
				};
			if(!!$.os.ios){
				_self._connectIOS(cback);
				return true;
			}else if(!!$.os.android){
				_self._connectAndroid(cback);
				return true;
			}else{
				console.log('no Native ~');
				return false;
			}
		},
		
		// 连接IOS
		_connectIOS: function(callback){
			var _self = this;
			if(window.WebViewJavascriptBridge){
				callback(window.WebViewJavascriptBridge);
			}else{
				console.log('no Native ~');
				document.addEventListener('WebViewJavascriptBridgeReady', function(){
					window.WebViewJavascriptBridge.init();
					callback(window.WebViewJavascriptBridge);
				},false);
			}
		},
		// 连接Android
		_connectAndroid: function(callback){
			var _self = this;
			if(window.WebJsBridge){
				callback(window.WebJsBridge);
			}else{
				console.log('no Native ~');
			}
		},
		
		// 注册 for IOS
		_registerHandlerIOS: function(name, func){
			var _self = this,
				bridge = _self.bridge;
			bridge.registerHandler(name, func);
		},
		// 注册 for Android
		_registerHandlerAndroid: function(name, func){
			var _self = this,
				bridge = _self.bridge;
			bridge[name] = func;
		},
		
		// 调用 for IOS
		_callHandlerIOS: function(name, data, callback){
			var _self = this,
				bridge = _self.bridge;
			bridge.callHandler(name, data, callback);
		},
		// 调用 for Android
		_callHandlerAndroid: function(name, data, callback){
			var _self = this,
				bridge = _self.bridge,
				result;
			if($.isPlainObject(data)){
				data = JSON.stringify(data);
			}
			result = bridge[name](data);
			callback && callback(result);
		},
		
		// 发消息 for IOS	
		_sendIOS: function(data, callback){
			var _self = this,
				bridge = _self.bridge;
			bridge.send(data, callback);
		},	
		// 发消息 for Android	
		_sendAndroid: function(data, callback){
			var _self = this;
			_self._callHandlerAndroid('send', data, callback);
		}
		
	});
	
    
    if(!window.KUI){
    	window.KUI = {};
    }
    KUI.Native = Native;
    
})(Zepto);/* 数据工具 - localStorage */
;(function($){

	var LocalData = function(config){
		var _self = this;
		_self.config = $.extend({}, LocalData.config, config);
		//_self._init();
	};
	LocalData.config = {
		keySpace: 'KUI'
	};
	
	$.extend(LocalData.prototype, {	
		setItem: function(key, value){
			var _self = this;
			if($.isArray(key)){
				if(key.length > 1){
					var obj = _self._getItem(key[0]),
						_obj = obj;
					for(var i = 1; i < key.length - 1; i++){
						_obj = _obj[key[i]];
						if(!_obj){
							break;
						}
					}
					if(_obj){
						_obj[key[key.length - 1]] = value;
					}
					_self._setItem(key[0], obj);
				}else{
					_self._setItem(key[0], value);
				}
			}else{
				_self._setItem(key, value);
			}
		},
		getItem: function(key){
			var _self = this,
				value;
			if($.isArray(key)){
				value = _self._getItem(key[0]);
				if(key.length > 1){
					for(var i = 1; i < key.length; i++){
						value = value[key[i]];
						if(!value){
							break;
						}
					}
				}
			}else{
				value = _self._getItem(key);
			}
			return value;
		},
		
		removeItem: function(key){
			var _self = this;
			if($.isArray(key)){
				if(key.length > 1){
					var obj = _self._getItem(key[0]),
						_obj = obj;
					for(var i = 1; i < key.length - 1; i++){
						_obj = _obj[key[i]];
						if(!_obj){
							break;
						}
					}
					if(_obj){
						delete _obj[key[key.length - 1]];
					}
					_self._setItem(key[0], obj);
				}else{
					_self._removeItem(key[0]);
				}
			}else{
				_self._removeItem(key);
			}
		},
		// 只去掉keySpace下的key
		clear: function(){
			var _self = this,
				keySpace = _self.config.keySpace;
				
			$.each(window.localStorage, function(k, v){
				if(k.indexOf(keySpace + '_')){
					_self._remove(k);
				}
			});
		},
		
		_setItem: function(key, value){
			var _self = this;
			key = _self._getKey(key);
			if($.isPlainObject(value)){
				value = JSON.stringify(value);
			}
			_self._set(key, value);
		},
		_getItem: function(key){
			var _self = this,
				value;
			key = _self._getKey(key);
			value = _self._get(key);
			try{
				value = JSON.parse(value);
			}catch(e){}
			return value;
		},
		_removeItem: function(key){
			var _self = this;
			key = _self._getKey(key);
			_self._remove(key);
		},
		
		_set: function(key, value){
			var _self = this;
			try{
				window.localStorage.removeItem(key);
			}catch(e){}
			try{
				window.localStorage.setItem(key, value);
			}catch(e){}
		},
		_get: function(key){
			var _self = this,
				value;
			try{
				value = window.localStorage.getItem(key);
			}catch(e){}
			return value;
		},
		_remove: function(key){
			var _self = this;
			try{
				window.localStorage.removeItem(key);
			}catch(e){}
		},
		_getKey: function(key){
			var _self = this,
				keySpace = _self.config.keySpace;
			return [keySpace, key].join('_');
		}

	});	
    
    if(!window.KUI){
    	window.KUI = {};
    }
    KUI.LocalData = LocalData;

})(Zepto);
// 司机端本地数据管理 by fuzheng
;(function($){

	var LocalDataManager = function(config){
		var _self = this;
		_self.config = $.extend({}, LocalDataManager.config, config);
		_self.events = [];
		_self._init();
	};
	LocalDataManager.config = {
		keySpace: 'DaijiaDriverData',
		base: {
			info: {
				// 司机ID
				id: '',
				// 登录token
				token: '',
				// 姓名
				name: '',
				// 工号
				number: '',
				// 性别
				sex: '',
				// 注册城市
				city: '',
				// 电话
				phoneNumber: '',
				// 代驾分
				score: '12',
				// 驾龄
				drivingAge: '1',
				// 头像
				photo: '',
				// 身份证
				idCard: '',
				// 驾照
				license: ''
			},
			task: {
				// 最新任务时间戳
				lastTime: ''
			},
			order: {
				//本月成单数
				monReceiveSucCount: 0,
				//本月接单数
				monReceiveCount: 0,
				// 本月拒单数
				monRejectCount: 0,
				// 本月被投诉数
				monComplaintPer:  0,
				// 本月消单数
				monCancelPer:  0,
                //上月接单数
                preMonthOrderNums: 0,
                //总接单数
                totalOrderNums: 0
			},
			evaluation: {
				// 星级评分
				score: 5,
				// 总评价
				commentedOrders: 0,
				// 好评数
				praiseCommentCount: 0,
				// 评价标签
				tags: []
			},
			money: {
				// 支付宝帐号
				alipayAccount: '-',
				// 可提现
				availabeMoney: 0,
                //总金额
                totoalFee: 0,
				// 本月收入（含现金）
				monIncome: 0
			},
			switchs:{
				//司机排名
				rankCity:0
			}
		},
		defaultCallback: function(e){
			if(e.value === '' || e.value === null || e.value === undefined){
				return;
			}
			var _self = this,
				cls = _self._getClsName(e.keys);
			$(cls).text(e.value);
		},
		moneyAvailabeMoneyCallback: function(e){
			if(e.value === '' || e.value === null || e.value === undefined){
				return;
			}
			var _self = this,
				cls = _self._getClsName(e.keys),
				value = e.value*1/100;
			value = (value < 0 ? 0 : value).toFixed(2);
			$(cls).text(value);
		}
	};
	
	KUI.extend(LocalDataManager, KUI.Event);
	
	$.extend(LocalDataManager.prototype, {
	
		_init: function(){
			var _self = this,
				localData = new KUI.LocalData({keySpace: _self.config.keySpace}),
				dataBase = _self.config.base;

			_self.localData = localData;
			// 初始化数据基本结构
			$.each(dataBase, function(key, value){
				if(!localData.getItem(key)){
					localData.setItem(key, value);
				}
			});	
			// 初始化geter seter
			_self._initGeter();
			_self._initEvent();
		},
		_initEvent: function(){
			var _self = this;
			$.each(_self.events, function(i, eName){
				var field = eName.replace('Changed', '').replace('Geted', '');
					cback = _self.config[eName + 'Callback'] || _self.config[field + 'Callback'] || _self.config['defaultCallback'];
				_self.on(eName, cback);
			});
		},
		// 目前只支持两层
		_initGeter: function(){
			var _self = this,
				dataBase = _self.config.base,
				fieldPath = [];
			$.each(dataBase, function(key, value){
				$.each(value, function(_key, _value){
					_self[$.camelCase(['get', key, _key].join('-'))] = function(hasFire){
						return _self._getter(key, _key, hasFire);
					};
					_self[$.camelCase(['set', key, _key].join('-'))] = function(v, hasFire){
						_self._setter(key, _key, v, hasFire);
					};
					_self.events.push($.camelCase([key, _key, 'changed'].join('-')));
					_self.events.push($.camelCase([key, _key, 'geted'].join('-')));
				});
			});
		},
		_getter: function(key1, key2, hasFire){
			var _self = this,
				eventName = $.camelCase([key1, key2, 'geted'].join('-'));
				value = _self.localData.getItem([key1, key2]);
			if(hasFire !== false){
				_self.fire(eventName, {keys: [key1, key2], value: value});
			}
			return value;
		},
		_setter: function(key1, key2, value, hasFire){
			var _self = this,
				eventName = $.camelCase([key1, key2, 'changed'].join('-'));
			_self.localData.setItem([key1, key2], value);
			if(hasFire !== false){
				_self.fire(eventName, {keys: [key1, key2], value: value});
			}
		},
		_getClsName: function(keys){
			var cls = '-' + keys.join('-') + '-content';
			cls = '.J_' + $.camelCase(cls);
			return cls;
		}
		
	});	
	
	$.extend(LocalDataManager, {
		renderStar: function(score){
			var	starTemp = [
					'<span class="dc-info-stargroup">',
						'{@each i in range(0, star.full)}',
						'<span class="iconfont icon-icstar dc-info-star-light"></span>',
						'{@/each}',
						'{@each i in range(0, star.half)}',
						'<span class="iconfont icon-icstar dc-info-star">',
							'<span class="iconfont icon-icstar dc-info-star-light-half"></span>',
						'</span>',
						'{@/each}',
						'{@each i in range(0, star.empty)}',
						'<span class="iconfont icon-icstar dc-info-star"></span>',
						'{@/each}',
					'</span>',
					'<span class="dc-info-score">${star.score}</span>'
				].join(''),
				_score = (score+'').split('.'),
				full = _score[0]*1,
				half = _score.length === 1 ? 0 : 1,
				empty = 5 - full - half,
				starHtml = juicer(starTemp, {star: {full: full, half: half, empty: empty, score: (score||0).toFixed(1)}});	
			return starHtml;
		},
		starCallback: function(e){
			if(e.value === '' || e.value === null || e.value === undefined){
				return;
			}
			var _self = this,
				cls = _self._getClsName(e.keys);
			$(cls).html(LocalDataManager.renderStar(e.value));
		},	
		imgSrcCallback: function(e){
			if(!e.value){
				return;
			}
			var _self = this,
				cls = _self._getClsName(e.keys);
			$(cls).attr('src', e.value);
		},	
		moneyCallback: function(e){
			if(e.value === '' || e.value === null || e.value === undefined){
				return;
			}
			var _self = this,
				cls = _self._getClsName(e.keys),
				value = (e.value*1/100).toFixed(2);
			$(cls).text(value);
		},
		mobileCallback: function(e){
			if(!e.value){
				return;
			}
			var _self = this,
				cls = _self._getClsName(e.keys),
				value = e.value.slice(0,3) + '****' + e.value.slice(7);
			$(cls).text(value);
		},
		visibleCallback: function(e){
			if(!e.value || e.value*1 == 0){
				return;
			}
			var _self = this,
				cls = _self._getClsName(e.keys);
			$(cls).show();
		}
	});
    
    if(!window.KUI){
    	window.KUI = {};
    }
    KUI.LocalDataManager = LocalDataManager;
	
})(Zepto);// 司机端本地数据管理 by fuzheng
;(function($){
	var driverUtils = {
	
		// 获取Hash参数
		getHashParam: function(key){
			var hashParam = this._getHash();
			return hashParam[key];
		},
		setHashParam: function(obj){
			var hashParam = this._getHash();
			hashParam = $.extend(hashParam, obj);
			this._setHash(hashParam);
		},
		_getHash: function(){
			var hash = window.location.hash,
				hashParam = {};
			hash = hash.slice(1);
			hash = hash.split('&');
			$.each(hash, function(i, p){
				if(p){
					var _p = p.split('=');
					if(_p[1]){
						hashParam[_p[0]] = _p[1];
					}
				}
			});
			return hashParam;
		},
		getSearch:function(){
            var search = {};
            if(location.search){
                var SEARCH = location.search.split('?')[1].split('&');
                SEARCH.forEach(function(item){
                    search[item.split('=')[0]] = item.split('=')[1];
                });
            }
            return search;
        },
		_setHash: function(obj){
			var hash = [];
			$.each(obj, function(key, value){
				hash.push(key + '=' + value);
			});
			hash = '#' + hash.join('&');
			window.location.hash = hash;
		},
		
		// 从客户端获取司机ID、登录token
		getToken: function(callback, nObj, localObj){
			localObj = localObj || new KUI.LocalDataManager();
			// 优先从native取token
			var nToken = this._getToken(nObj, localObj, function(driverId, token){
				callback && callback(driverId, token);
			});
			// 如果没有native，则去本地token
			if(!nToken && !$.os.ios){
				var driverId = localObj.getInfoId(false),
					token = localObj.getInfoToken(false);
				callback && callback(driverId, token);
			}
		},
	
		_getToken: function(nObj, localObj, callback){
			nObj = nObj || new KUI.Native();
			localObj = localObj || new KUI.LocalDataManager();
			return nObj.callHandler('getToken', null, function(result){
				if(!$.isPlainObject(result)){
					result = JSON.parse(result);
				}
				localObj.setInfoId(result.did, false);
				localObj.setInfoToken(result.token, false);
				callback && callback(result.did, result.token);
			});
		},
		/**
	 	* 获取url的参数 
	 	*/
		getSearchParams: function(){
	        var search = {};
	        if(location.search){
	            var _search = location.search.split('?')[1].split('&');
	            _search.forEach(function(item){
	                search[item.split('=')[0]] = item.split('=')[1];
	            });
	        }
	        return search;
	   	},
	   	getDjDriverVersion: function(){
	   		var _ua_dj_arrl = /daijia\.driver\/(\d+\.\d+\.\d+)/.exec(navigator.userAgent);
	   		return _ua_dj_arrl ? _ua_dj_arrl[1] : null;
	   	},
		taskItemTemplate: [
			'<div class="dc-taskitem-label dc-gray-border">',
				'${item.typeText}',
				'<span class="dc-taskitem-date">${item.taskPublishDate}</span>',
			'</div>',
			'<div class="dc-taskitem-content dc-gray-border clearfix">',
				'<div class="dc-taskitem-status dc-gray-border {@if item.statusfailure} dc-taskitem-status-failure{@/if}">',
					'<div class="dc-taskitem-status-inner">',
						'<span class="dc-taskitem-money">${item.reward}</span>元',
						'{@if item.statusText}',
						'<span class="dc-taskitem-statustext">（${item.statusText}）</span>',
						'{@/if}',
					'</div>',
				'</div>',
				'<div class="dc-taskitem-detail">',
					'<div class="dc-taskitem-title">${item.name}</div>',
					'<div class="dc-taskitem-progress"><span class="dc-taskitem-progress-inner" style="width:${item.progress}%;"></span></div>',
					'<ul class="dc-taskitem-list">',
						'{@if item.orderCount && item.orderCount > 0}',
							'<li class="dc-taskitem-listitem">',
								'<span class="iconfont icon-icmissionorder"></span>',
								'<span>累计接${item.orderCount}单</span>',
								'{@if item.realOrderCount >= item.orderCount}',
									'<span class="dc-taskitem-listitem-status dc-taskitem-listitem-status-success iconfont icon-icordercheck"></span>',
								'{@else if item.taskStatus === 4}',
									'<span class="dc-taskitem-listitem-status">当前${item.realOrderCount}单</span>',
								'{@else}',
									'<span class="dc-taskitem-listitem-status dc-taskitem-listitem-status-failure">未达成</span>',
								'{@/if}',
							'</li>',
						'{@/if}',
						'{@if item.onlineTime && item.onlineTime > 0}',
							'<li class="dc-taskitem-listitem">',
								'<span class="iconfont icon-icclock"></span>',
								'<span>累计在线${item.onlineTimeHour}小时</span>',
								'{@if item.realOnlineTime >= item.onlineTime}',
									'<span class="dc-taskitem-listitem-status dc-taskitem-listitem-status-success iconfont icon-icordercheck"></span>',
								'{@else if item.taskStatus == 4}',
									'<span class="dc-taskitem-listitem-status">当前${item.realOnlineTimeHour}小时</span>',
								'{@else}',
									'<span class="dc-taskitem-listitem-status dc-taskitem-listitem-status-failure">未达成</span>',
								'{@/if}',
							'</li>',
						'{@/if}',
						'{@if item.rejectCount >= 0}',
							'<li class="dc-taskitem-listitem">',
								'<span class="iconfont icon-icmissionorderfail"></span>',
								'<span>拒绝独享单不超过${item.rejectCount}次</span>',
								'{@if item.realRejectCount <= item.rejectCount}',
									'{@if item.taskStatus === 4}',
										'<span class="dc-taskitem-listitem-status">当前${item.realRejectCount}次</span>',
									'{@else}',
										'<span class="dc-taskitem-listitem-status dc-taskitem-listitem-status-success iconfont icon-icordercheck"></span>',
									'{@/if}',
								'{@else}',
									'{@if item.taskStatus === 4}',
										'<span class="dc-taskitem-listitem-status dc-taskitem-listitem-status-error">已超过</span>',
									'{@else}',
										'<span class="dc-taskitem-listitem-status dc-taskitem-listitem-status-failure">未达成</span>',
									'{@/if}',
								'{@/if}',
							'</li>',
						'{@/if}',
					'</ul>',
				'</div>',
			'</div>',
			'{@if item.upgradeRuleList && item.upgradeRuleList.length > 0}',
				'<div class="dc-taskitem-subtitle dc-gray-border">达成以上条件后，任务指定时间内超额接单有奖</div>',
				'{@each item.upgradeRuleList as upgradeItem}',
				'<div class="dc-taskitem-content dc-gray-border clearfix">',
					'<div class="dc-taskitem-status dc-gray-border {@if upgradeItem.statusfailure} dc-taskitem-status-failure{@/if}">',
						'<div class="dc-taskitem-status-inner">',
							'+<span class="dc-taskitem-money">${upgradeItem.upgradeReward}</span>元',
							'{@if upgradeItem.statusText}',
							'<span class="dc-taskitem-statustext">（${upgradeItem.statusText}）</span>',
							'{@/if}',
						'</div>',
					'</div>',
					'{@if upgradeItem.isLocked}',
						'<div class="dc-taskitem-detail dc-taskitem-detail-locked">',
							'累计接${upgradeItem.upgradeOrders}单，额外奖励${upgradeItem.upgradeReward}元</br>',
							'共计${upgradeItem.totalReward}元',
							'<span class="iconfont icon-icorderlock"></span>',
						'</div>',
					'{@else}',
						'<div class="dc-taskitem-detail">',
							'<div class="dc-taskitem-progress"><span class="dc-taskitem-progress-inner" style="width:${upgradeItem.progress}%;"></span></div>',
							'<ul class="dc-taskitem-list">',
								'<li class="dc-taskitem-listitem">',
									'<span class="iconfont icon-icmissionorder"></span>',
									'<span>累计接${upgradeItem.upgradeOrders}单</span>',
									'{@if item.realOrderCount >= upgradeItem.upgradeOrders}',
										'<span class="dc-taskitem-listitem-status dc-taskitem-listitem-status-success iconfont icon-icordercheck"></span>',
									'{@else if item.taskStatus === 4}',
										'<span class="dc-taskitem-listitem-status">当前接${item.realOrderCount}单</span>',
									'{@else}',
										'<span class="dc-taskitem-listitem-status dc-taskitem-listitem-status-failure">未达成</span>',
									'{@/if}',
							'</ul>',
						'</div>',
					'{@/if}',
				'</div>',
				'{@/each}',
			'{@/if}'
		].join(''),
		
		getTaskItemData: function(itemData){
			var formatTime = function(s){
				var h = ((Math.floor(s/360))/10).toFixed(1);
				if(h.split('.')[1]*1 === 0){
					h = h.split('.')[0];
				}
				return h;
			};
			// 连接
			itemData.link = '/m/djdrivertaskdetail.html#id=' + itemData.taskId + '&status=' + itemData.taskStatus;
			// realOrderCount
			itemData.realOrderCount = itemData.realOrderCount || 0;
			itemData.realRejectCount = itemData.realRejectCount || 0;

			// 时间
			itemData.onlineTimeHour = formatTime(itemData.onlineTime);
			itemData.realOnlineTimeHour = formatTime(itemData.realOnlineTime);
			// 是否置灰
			itemData.statusfailure = itemData.taskStatus === 0 ? true : false;
			// 状态
			switch(itemData.taskStatus){					
				case 0:
					itemData.statusText = '未达成';
					break;
				case 1:
					itemData.statusText = '审核中';
					break;
				case 2:
					itemData.statusText = '已达成';
					break;
				case 3:
					itemData.statusText = '已发放';
					break;
			}
			// 升级任务
			if(itemData.upgradeRuleList && itemData.upgradeRuleList.length > 0){
				itemData.totalReward = itemData.reward;
				$.each(itemData.upgradeRuleList, function(j, upgradeItem){
					// 总计奖励
					itemData.totalReward = (itemData.totalReward * 1 + upgradeItem.upgradeReward).toFixed(0);
					upgradeItem.totalReward = itemData.totalReward;
					// 锁定
					if(j === 0){
						upgradeItem.isLocked = ((itemData.progress < 100) || (itemData.rejectCount?(itemData.realRejectCount > itemData.rejectCount):false));
					}else{
						upgradeItem.isLocked = ((itemData.upgradeRuleList[j-1].progress < 100) || (itemData.rejectCount?(itemData.realRejectCount > itemData.rejectCount):false));
					}
					// 是否置灰
					upgradeItem.statusfailure = upgradeItem.isLocked || ((itemData.taskStatus !== 4) && (!(upgradeItem.isReached) || (itemData.taskStatus === 0)));
					if(!upgradeItem.isLocked){
						// 状态
						if(itemData.taskStatus !== 4){
							if(upgradeItem.isReached){
								upgradeItem.statusText = itemData.statusText;
							}else{
								upgradeItem.statusText = '未达成';
							}
						}
						// 进度
						upgradeItem.progress = parseInt(itemData.realOrderCount*100/upgradeItem.upgradeOrders);
						if(upgradeItem.progress > 100){
							upgradeItem.progress = 100;
						}
					}else{
						upgradeItem.progress = 0;
					}
						
				});
			}
			// 类型
			itemData.typeText = (itemData.upgradeRuleList && itemData.upgradeRuleList.length > 0) ? '分段任务（最高' + itemData.totalReward + '元）' : '一般任务';
			
			return itemData;
		},
		
		formatDate: function(date, format) {
			format = format || 'yyyy-MM-dd hh:mm:ss';
			if(!date){
				return '';
			}
			var now = new Date(date);
			var o = {
				"M+": now.getMonth() + 1, //month
				"d+": now.getDate(), //day
				"h+": now.getHours(), //hour
				"m+": now.getMinutes(), //minute
				"s+": now.getSeconds(), //second
				"q+": Math.floor((now.getMonth() + 3) / 3), //quarter
				"S": now.getMilliseconds() //millisecond
			}
			if (/(y+)/.test(format)) {
				format = format.replace(RegExp.$1, (now.getFullYear() + "")
					.substr(4 - RegExp.$1.length));
			}

			for (var k in o) {
				if (new RegExp("(" + k + ")").test(format)) {
					format = format.replace(RegExp.$1,
						RegExp.$1.length == 1 ? o[k] :
						("00" + o[k]).substr(("" + o[k]).length));
				}
			}
			return format;
		},
		
		jumpUrl: function(url, nObj){
			if(url.indexOf('http') === -1){
				url = KUIGlobalConfig.pageHost + url;
			}
			nObj = nObj || new KUI.Native();
			if(!nObj.callHandler('jumpUrl', url)){
				if($.os && !$.os.ios){
					window.location.href = url;
				}
			}
		},
		jumpListUrl: function(elm, nObj){
			var url = elm.attr('data-href'),
				jumpStatus = elm.attr('data-jumpStatus');
			if(!jumpStatus){
				$('.J_DriverPageLinkClick').attr('data-jumpStatus', 'jumping');
				$('.J_DriverPageLink').attr('data-jumpStatus', 'jumping');
				setTimeout(function(){
					$('.J_DriverPageLinkClick').attr('data-jumpStatus', '');
					$('.J_DriverPageLink').attr('data-jumpStatus', '');
				}, 1500);
				driverUtils.jumpUrl(url, nObj);
			}
		},
	
		jumpButton: function(title, url, nObj){
			nObj = nObj || new KUI.Native();
			nObj.registerHandler('jumpAction', function(url, nObj){
				return function(){
					KUI.driverUtils.jumpUrl(url, nObj);
				};
			}(url, nObj));
			nObj.callHandler('showButton', {
				'title': title,
				'actionName': 'jumpAction'
			});
		},
		
		kopErrorCallback: function(nObj){
			nObj = nObj || new KUI.Native();
			return function(err, msg){
				var reLoginCode = [999601, 999602, 620014];
				if(msg && (msg == '网络异常~' || msg == '请求出错~' || $.inArray(err, reLoginCode) > -1)){
					nObj.toast(msg);
				}else{
					nObj.alert(msg);
				}
				if($.inArray(err, reLoginCode) > -1){
					nObj.callHandler('goToLogin', null);
				}
			};
		},
		// 安卓用toast ios用alert
		showTip: function(msg, nObj){
			nObj = nObj || new KUI.Native();
			nObj.alert(msg);
			/*if($.os && !!$.os.android){
				nObj.toast(msg);
			}else{
				nObj.alert(msg);
			}*/
		}
		
	};
    
    if(!window.KUI){
    	window.KUI = {};
    }
    KUI.driverUtils = driverUtils;
    
    // 全局设置连接跳转
    if($.os){
		$('body').on('tap', '.J_DriverPageLink', function(e){
			driverUtils.jumpListUrl($(this));
		});	
    	if(!!$.os.android){
			$('body').on('click', '.J_DriverPageLinkClick', function(e){
				driverUtils.jumpListUrl($(this));
			});	
    	}else{
			$('body').on('tap', '.J_DriverPageLinkClick', function(e){
				driverUtils.jumpListUrl($(this));
			});	
    	}
    }
    
})(Zepto);// 司机中心 by fuzheng

;(function($){
	//localStorage.clear();
	var localDataManager = new KUI.LocalDataManager(),
		kop = new KUI.KOP();
					
	KUI.driverUtils.getToken(function(did, token){
		if(!did || !token){
			return;		
		}
		
		// 获取个人中心数据
		kop.send('lj.c.d.getAllInfo', {
			'did': did
		}, did, token, function(data){
			localDataManager.setInfoPhoto(data.detailInfoResult.headThumbUrl, false);	
			localDataManager.setInfoName(data.driverRegisterResult.name, false);	
			localDataManager.setOrderMonReceiveSucCount(data.detailInfoResult.monReceiveCount, false);	
			localDataManager.setOrderMonRejectCount(data.detailInfoResult.monRejectCount, false);	
			localDataManager.setOrderMonComplaintPer(data.detailInfoResult.monComplaintCount, false);	
			localDataManager.setEvaluationScore(data.detailInfoResult.starLever, false);	
			localDataManager.setInfoScore(data.detailInfoResult.workScores, false);	
			localDataManager.setInfoNumber(data.driverRegisterResult.jobNumber, false);	
			localDataManager.setMoneyAlipayAccount(data.detailInfoResult.alipayAccount || '-', false);	
			localDataManager.setInfoSex(data.detailInfoResult.sex, false);	
			localDataManager.setInfoDrivingAge(data.detailInfoResult.driveringAge + '年', false);	
			localDataManager.setInfoCity(data.driverRegisterResult.cityName, false);	
			localDataManager.setInfoPhoneNumber(data.detailInfoResult.mob, false);	
			localDataManager.setInfoIdCard(data.detailInfoResult.identityUrl, false);	
			localDataManager.setInfoLicense(data.detailInfoResult.driverCarUrl, false);
		});
		
		// 获取更多页面数据
		kop.send('lj.c.d.more', {
			'did': did
		}, did, token, function(data){		
			localDataManager.setMoneyMonIncome(data.driverWalletResult.monIncome, false);	
			localDataManager.setMoneyAvailabeMoney(data.driverWalletResult.availabeMoney, false);	
		});
	
	}, null, localDataManager);
	
})(Zepto);
